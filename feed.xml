<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>텅 빈 충만의 블로그</title>
  <subtitle>Ruby JavaScript Scheme을 사랑하는 초보 학생의 소박한 프로그래밍.</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://voidsatisfaction.github.io/"/>
  <updated>2016-10-21T01:34:44.000Z</updated>
  <id>https://voidsatisfaction.github.io/</id>
  
  <author>
    <name>텅 빈 충만(voidSatisfaction)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>너무 헷갈리는 자바스크립트 Class개념</title>
    <link href="https://voidsatisfaction.github.io/2016/10/21/so-hard-javascript-class/"/>
    <id>https://voidsatisfaction.github.io/2016/10/21/so-hard-javascript-class/</id>
    <published>2016-10-21T01:11:37.000Z</published>
    <updated>2016-10-21T01:34:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="자료-출처"><a href="#자료-출처" class="headerlink" title="자료 출처"></a>자료 출처</h2><ul>
<li><p><a href="http://steadypost.net/post/lecture/id/13/" target="_blank" rel="external">자바스크립트 클래스를 정의하는 3가지 방법</a></p>
</li>
<li><p><a href="http://wit.nts-corp.com/2014/03/05/1042" target="_blank" rel="external">자바스크립트 객체 생성</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/ko/docs/A_re-introduction_to_JavaScript#.EC.82.AC.EC.9A.A9.EC.9E.90_.EC.A0.95.EC.9D.98_.EA.B0.9D.EC.B2.B4" target="_blank" rel="external">JavaScript 재입문하기 - MDN</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="external">JavaScript Classes - MDN</a></p>
</li>
</ul>
<h2 id="배경"><a href="#배경" class="headerlink" title="배경"></a>배경</h2><p>리액트 네이티브를 쓰다가 보면, 자바스크립트 코어를 알아야 문제를 해결해야 하는 경우가 종종 발생한다.</p>
<p>그리고 꼭 리액트 네이티브에서 뿐 아니라 자주 사용하는 언어의 코어를 공부하는 것은 필수적이라고 할 수 있다.</p>
<p>애초에 내가 객체지향 프로그래밍에 대한 이해가 달려서 그런지 내용 자체가 지금은 아리송한 경우가 많은데, <strong>객체 지향 프로그래밍</strong>을 따로 공부해야 겠다.</p>
<h2 id="핵심"><a href="#핵심" class="headerlink" title="핵심"></a>핵심</h2><ul>
<li>자바스크립트에는 <strong>클래스가 존재하지 않는다.</strong> 클래스를 흉내낼 뿐이다.</li>
</ul>
<h2 id="의문"><a href="#의문" class="headerlink" title="의문"></a>의문</h2><ul>
<li>함수에서 객체를 생성하기 위한 <code>new</code> 라는 친구도 함수인가?</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;자료-출처&quot;&gt;&lt;a href=&quot;#자료-출처&quot; class=&quot;headerlink&quot; title=&quot;자료 출처&quot;&gt;&lt;/a&gt;자료 출처&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://steadypost.net/post/lecture/id/13
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="ECMA Script6" scheme="https://voidsatisfaction.github.io/categories/JavaScript/ECMA-Script6/"/>
    
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/tags/JavaScript/"/>
    
      <category term="객체지향" scheme="https://voidsatisfaction.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>자바스크립트 공부에 도움이 되는 사이트</title>
    <link href="https://voidsatisfaction.github.io/2016/10/14/good-site-for-javascript-study/"/>
    <id>https://voidsatisfaction.github.io/2016/10/14/good-site-for-javascript-study/</id>
    <published>2016-10-14T06:56:24.000Z</published>
    <updated>2016-10-14T07:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-입문"><a href="#JavaScript-입문" class="headerlink" title="JavaScript 입문"></a>JavaScript 입문</h2><ul>
<li><a href="https://www.codecademy.com/learn/learn-javascript" target="_blank" rel="external">Codecademy - Learn JavaScript</a></li>
</ul>
<p>아에 자바스크립트를 처음 접한다면 이곳의 튜토리얼을 하는 것을 추천한다. 언어는 영어지만 수준이 높은 영어가 아니라서 알기 쉽다.</p>
<h2 id="JavaScript-Core"><a href="#JavaScript-Core" class="headerlink" title="JavaScript Core"></a>JavaScript Core</h2><ul>
<li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript" target="_blank" rel="external">Mozilla - JavaScript</a></p>
<ul>
<li><p><a href="https://developer.mozilla.org/ko/docs/A_re-introduction_to_JavaScript" target="_blank" rel="external">JavaScript 재입문하기</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript" target="_blank" rel="external">객체지향 JavaScript 소개</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="external">JavaScript classes</a></p>
</li>
</ul>
</li>
</ul>
<p>한글화가 되어있어서 정말 도움이 많이 되는 사이트 들이다. JavaScript 재입문하기는 내가 막연히 써오던 자바스크립트의 면면을</p>
<p>알기 쉽게 낱낱히 긁어주는 느낌이랄까. 정말 큰 도움이 되었다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript-입문&quot;&gt;&lt;a href=&quot;#JavaScript-입문&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 입문&quot;&gt;&lt;/a&gt;JavaScript 입문&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www
    
    </summary>
    
      <category term="교육" scheme="https://voidsatisfaction.github.io/categories/%EA%B5%90%EC%9C%A1/"/>
    
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/tags/JavaScript/"/>
    
      <category term="프로그래밍" scheme="https://voidsatisfaction.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
  </entry>
  
  <entry>
    <title>React Native의 원리 및 JavaScript의 함수</title>
    <link href="https://voidsatisfaction.github.io/2016/10/14/javascript-study-and-react-native-function-method/"/>
    <id>https://voidsatisfaction.github.io/2016/10/14/javascript-study-and-react-native-function-method/</id>
    <published>2016-10-14T02:26:21.000Z</published>
    <updated>2016-10-14T03:13:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="출처-및-들어가-보면-좋은-사이트"><a href="#출처-및-들어가-보면-좋은-사이트" class="headerlink" title="출처 및 들어가 보면 좋은 사이트"></a>출처 및 들어가 보면 좋은 사이트</h2><ul>
<li><p>사부의 말</p>
</li>
<li><p><a href="https://developer.mozilla.org/ko/docs/A_re-introduction_to_JavaScript" target="_blank" rel="external">Intoriduction to JavaScript - Mozilla 재단</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript" target="_blank" rel="external">객체지향 자바스크립트의 소개 - Mozilla 재단</a></p>
</li>
</ul>
<h2 id="의문"><a href="#의문" class="headerlink" title="의문"></a>의문</h2><p>내가 React Native코드를 작성하는 과정에서 다음과 같은 일이 있었다.</p>
<p>ListView의 renderRow함수를 this.renderRow로 하고<br>그 안의 TouchableOpacity의 onPress속성에 부모 컴포넌트에서 받아온 함수를 넘겨주려고 했는데,<br>막상 클릭해보니 <code>this.props.함수 == undefined</code> 이라는 것이었다.</p>
<p>즉, this.props에는 그 함수가 존재하지 않는다는 것이었는데, 나는 renderRow라는 함수를 component class안에 정의해두었기 때문에<br>당연히 this가 그 component를 가리킨다고 생각했다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolBoardList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">boardItems</span>: PropTypes.array.isRequired,</div><div class="line">    <span class="attr">boardItemOnpress</span>: PropTypes.func.isRequired,</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">const</span> ds = <span class="keyword">new</span> ListView.DataSource(&#123; <span class="attr">rowHasChanged</span>: <span class="function">(<span class="params">r1, r2</span>) =&gt;</span> r1 !== r2 &#125;);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">dataSource</span>: ds.cloneWithRows(<span class="keyword">this</span>.props.boardItems),</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.renderRow = <span class="keyword">this</span>.renderRow.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  renderRow(rowData) &#123;</div><div class="line">    <span class="keyword">const</span> &#123; title, date, content, author, good, chat &#125; = rowData;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TouchableOpacity</span></span></span></div><div class="line">        <span class="attr">style</span>=<span class="string">&#123;style.item&#125;</span></div><div class="line">        <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt; &#123; this.props.boardItemOnpress(); &#125;&#125;</div><div class="line">      &gt;</div><div class="line">        ...</div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> &#123; dataSource &#125; = <span class="keyword">this</span>.state;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;style.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">          <span class="attr">dataSource</span>=<span class="string">&#123;dataSource&#125;</span></div><div class="line">          <span class="attr">renderRow</span>=<span class="string">&#123;this.renderRow&#125;</span></div><div class="line">          <span class="attr">automaticallyAdjustContentInsets</span>=<span class="string">&#123;false&#125;</span></div><div class="line">        /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이런식으로 되어있는 코드였다.</p>
<p>그래서 어? 어쩐일이지? 하면서 TouchableOpacity내부의 onPress속성 안에 console.log(this)를 넣어보니 웬걸 this는 전역객체를 의미하고 있었다!</p>
<p>그래서 나는 “뭐지? 난 클래스 안에다가 함수를 정의했는데? 왜 this가 전역객체인거야!” 하고 대혼란에 빠졌다.</p>
<h2 id="사부의-답변"><a href="#사부의-답변" class="headerlink" title="사부의 답변"></a>사부의 답변</h2><p>그래서 나는 바로 사부에게 물어보았다. “왜 클래스 안에다가 함수를 정의했는데 this가 전역이 되는가?” 라고.</p>
<p>그래서 사부는 나에게 “React Native에서 render를 누가 부를까요? 라고 되물었다.”</p>
<p>답은 ‘React Native 엔진’이었다.</p>
<p>사부에 의하면 React Native엔진의 행동은 다음과 같다.(다소 차이점이 있다고는 하지만 지금은 이렇게 알아둬도 된다고 했다.)</p>
<hr>
<p><strong>RN 엔진의 행동</strong></p>
<ol>
<li><p>index.js 실행</p>
</li>
<li><p>React Native Lifecycle실행</p>
</li>
<li><p>index.js안의 new component를 만듬</p>
</li>
<li><p>component.render()를 실행해서 view를 만듬</p>
</li>
<li><p>동작</p>
</li>
</ol>
<p><strong>메소드와 함수</strong></p>
<blockquote>
<p>클래스.함수 로 실행시키면 클래스 안에 있는 함수를 실행시키는 거여서 메서드 로 처리해요.  </p>
<p>근데 형은 보통 this.함수를 클래스 안에서 사용하잖아요 이 경우에는 React Native입장에서 this.함수의 결과가 함수잖아요 그래서 함수로 실행시켜요.</p>
</blockquote>
<hr>
<p>즉 React Native엔진이 component.render()를 실행할때는 this가 component가 되니까 즉 class 가 되니까 </p>
<p>render()함수 내에서 사용한 this.함수명 = 메소드(component 클래스 안에서의 함수 ex: 위의 경우 <code>renderRow()</code>와 같은 함수) 이렇게 되는거고</p>
<p>근데 버튼을 클릭하는 행동 같은 경우에는 class안에서 this를 정의해버렸으니 그 this가 전역객체니까 그걸 다시 component로 바꾸기 위해서 constructor나 render안에서 bind(this)하는 것이었다.</p>
<p>즉 그냥 renderRow함수 내에서 <code>&lt;TouchableOpacity onPress={this.props.boardItemOnpress}</code> 이렇게만 하면 RN엔진이 <strong>component.renderRow이렇게 실행하지 않기</strong>때문에 renderRow안의 this는 전역 객체가 되어 버리고</p>
<p>전역 this에는 this.props.boardItemOnpress가 존재하지 않으니까 <code>this.props.함수 == undefined</code> 이렇게 되었던 것이었다.</p>
<p>그렇기 때문에 이 문제를 해결하기 위해서는 클래스 내부의 constructor함수에서 <code>this.renderRow = this.renderRow.bind(this)</code> 이렇게 this의 지정을 component class로 명확히 해줘야 한다.</p>
<p>이는 <code>함수.bind(this)</code>를 해주기 전까지는 <strong>어디에서 혹은 무엇이</strong> 그 함수를 부르는가가 중요하지만, <code>함수.bind(this)</code>를 해주는 행위는 <strong>어디에서 그 함수를 호출하든 함수 내부의 this를 지정</strong> 해주는 것이다.</p>
<h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><p>어떠한 기술을 확실히 ‘내 것’으로 만들기 위해서는 그 기술의 core를 이해하지 않으면 안된다.</p>
<p>이번 일을 계기로 JavaScript의 class개념, 함수 / 메소드 개념 React Native의 Lifecycle같은 개념을 알아야 하는 것의 중요함을 깨닫게 되었다.</p>
<p>자바스크립트에 대해서 깊이 이해하고 싶은 분들은 앞에서 소개한 mozilla재단의 javascript관련 문서를 읽는 것을 추천합니다.</p>
<p>역시 프로그래밍은 재미있다! 그리고 사부는 최고다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;출처-및-들어가-보면-좋은-사이트&quot;&gt;&lt;a href=&quot;#출처-및-들어가-보면-좋은-사이트&quot; class=&quot;headerlink&quot; title=&quot;출처 및 들어가 보면 좋은 사이트&quot;&gt;&lt;/a&gt;출처 및 들어가 보면 좋은 사이트&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/categories/JavaScript/React-Native/"/>
    
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/tags/React-Native/"/>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 134</title>
    <link href="https://voidsatisfaction.github.io/2016/10/07/project-euler-134-solution/"/>
    <id>https://voidsatisfaction.github.io/2016/10/07/project-euler-134-solution/</id>
    <published>2016-10-06T16:55:01.000Z</published>
    <updated>2016-10-06T17:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Prime-pair-connection"><a href="#Prime-pair-connection" class="headerlink" title="Prime pair connection"></a>Prime pair connection</h3><hr>
<p>Consider the consecutive primes p1 = 19 and p2 = 23. It can be verified that 1219 is the smallest number such that the last digits are formed by p1 whilst also being divisible by p2.</p>
<p>In fact, with the exception of p1 = 3 and p2 = 5, for every pair of consecutive primes, p2 &gt; p1, there exist values of n for which the last digits are formed by p1 and n is divisible by p2. Let S be the smallest of these values of n.</p>
<p>Find ∑ S for every pair of consecutive primes with 5 ≤ p1 ≤ 1000000.</p>
<hr>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">가장 먼저 1부터 10^6+3 까지의 모든 소수의 배열을 구합니다.(10^6까지인 이유는 그래야지 p1이 10^6이하인 모든 소수를 포함할 수 있기 때문입니다.)</div><div class="line"></div><div class="line">그 배열에서 p1, p2를 선택해나가며 최소인 n 즉 s를 계산해나갑니다.</div><div class="line"></div><div class="line">최소인 n을 계산할때는 p2 * n 의 마지막자리 몇자리수 = p1 이렇게 되어야하는데</div><div class="line">이는 p1의 1의자리수부터 10의 자리수 100의자리수 ... 이런식으로 거꾸로 구해주면 됩니다.</div><div class="line"></div><div class="line">예를들어, p1 = 999979, p2 = 999983라고 하면</div><div class="line">n 의 1의자리수 = 9 따라서, p2 * i 에서의 i의 1의자리수는 3*3 = 9이므로 3이 되어야합니다.</div><div class="line">n 의 10의자리수 = 7 따라서, p2 * i 에서의 i의 10의자리수는 3*9 = 27(7 mod 10)이므로 9가 되어야합니다.</div><div class="line">....</div><div class="line"></div><div class="line">위의 행위를 여러번 반복하면 결국 최소인 n을 구할 수 있게됩니다.(그것이 least_n함수)</div><div class="line">저는 재귀함수를 이용하였습니다.</div><div class="line"></div><div class="line">Took 2.37secs</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'prime'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Problem134</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">find_ans</span></span></div><div class="line">    primes = primes_until(<span class="number">10</span>**<span class="number">6</span>+<span class="number">3</span>)</div><div class="line">    i = <span class="number">0</span>; s = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> primes[i] &lt; <span class="number">10</span>**<span class="number">6</span></div><div class="line">      p1, p2 = primes[i], primes[i+<span class="number">1</span>]</div><div class="line">      s += least_n(<span class="number">0</span>,p1,p2,<span class="number">0</span>)</div><div class="line">      i += <span class="number">1</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    s</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">least_n</span><span class="params">(n,p1,p2,sum)</span></span></div><div class="line">    <span class="keyword">return</span> sum <span class="keyword">if</span> sum % <span class="number">10</span>**(p1.to_s.length) === p1</div><div class="line">    sum_last = (sum / <span class="number">10</span>**n) % <span class="number">10</span></div><div class="line">    p2_last = p2 % <span class="number">10</span></div><div class="line">    p1_last = (p1 / <span class="number">10</span>**n) % <span class="number">10</span></div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">until</span> (p2_last * i + sum_last) % <span class="number">10</span> === p1_last</div><div class="line">      i += <span class="number">1</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    sum += p2 * i * <span class="number">10</span>**n</div><div class="line">    n += <span class="number">1</span></div><div class="line">    least_n(n,p1,p2,sum)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">primes_until</span><span class="params">(n)</span></span></div><div class="line">    primes = []</div><div class="line">    <span class="number">5</span>.upto(n)&#123; <span class="params">|i|</span> primes.push(i) <span class="keyword">if</span> i.prime? &#125;</div><div class="line">    primes</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">start = Time.now</div><div class="line">p Problem134.find_ans</div><div class="line">p Time.now - start</div></pre></td></tr></table></figure>
<h2 id="Efficiency"><a href="#Efficiency" class="headerlink" title="Efficiency"></a>Efficiency</h2><p>O(nlogn)</p>
<h2 id="Afterthoughts"><a href="#Afterthoughts" class="headerlink" title="Afterthoughts"></a>Afterthoughts</h2><p>거꾸로 풀어 올라간다는 발상만 할 수 있다면 그렇게 어려운 문제는 아니었던것 같다.</p>
<p>그런데 생각보다 거꾸로 올라가는 알고리즘을 구하는게 쉽지가 않아서 하루정도 쉬고 다시 그 부분만 알고리즘을 짰다.</p>
<p>이번에는 깊이 숙고해서 문제와 모든 정보를 공책에 쓴 뒤에 약간의 손코딩 후에 코드를 작성했는데 정말 큰 도움이 되었다.</p>
<p>역시 파인만 선생님.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;h3 id=&quot;Prime-pair-connection&quot;&gt;&lt;a href=&quot;#Prime-pair-c
    
    </summary>
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/categories/Ruby/"/>
    
      <category term="Project Euler" scheme="https://voidsatisfaction.github.io/categories/Ruby/Project-Euler/"/>
    
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/tags/Ruby/"/>
    
      <category term="Project Euler" scheme="https://voidsatisfaction.github.io/tags/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title>MECE하게 &#39;생각&#39;하라.</title>
    <link href="https://voidsatisfaction.github.io/2016/10/06/lesson-from-teacher-with-errors/"/>
    <id>https://voidsatisfaction.github.io/2016/10/06/lesson-from-teacher-with-errors/</id>
    <published>2016-10-05T16:15:38.000Z</published>
    <updated>2016-10-06T04:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-사부와의-미팅에서-배운-것들"><a href="#오늘-사부와의-미팅에서-배운-것들" class="headerlink" title="오늘 사부와의 미팅에서 배운 것들."></a>오늘 사부와의 미팅에서 배운 것들.</h2><ul>
<li><p>에러가 뜨면 막무가내로 실행하지 말고, 한 번 더 논리적으로 천천히 생각해보자. 본질에 입각해서 생각하자.</p>
</li>
<li><p>어떠한 process중에서 에러가 발생하면 그 process의 하나하나의 단계를 MECE(Mutually Exclusive and Collectively Exhaustive)하게 테스트한다.</p>
</li>
<li><p>편한 Tool을 항상 알아보자. ex) Reactotron, Vscode(plug in), Atom eslint, Atom terminal, Zsh 생산성을 상승 시키자.</p>
</li>
<li><p>기회가 있으면 꼭 참여해보자.</p>
</li>
</ul>
<hr>
<p>오랜만에 사부와 미팅을 했다.</p>
<p>방학동안에 한 번도 보지 못했는데, 여전히 사부는 사부였고, 나 역시 배운 것이 참 많았다.</p>
<p><strong>위에 내가 배운것을 정리해 놓았다.</strong></p>
<h2 id="사고-정지의-위험성"><a href="#사고-정지의-위험성" class="headerlink" title="사고 정지의 위험성"></a>사고 정지의 위험성</h2><p>파인만 알고리즘, Do not study programming과 같은 글들을 보면 프로그래밍을 잘 하는 방법은 참 간단하고 명쾌하다.</p>
<p><strong>‘손부터 움직이지 말고, 문제를 올바르게 파악하여 해결책에 대하여 숙고한 뒤에 해결하기 위한 코딩을 한다.’</strong> 라는 것이다.</p>
<p>이미 위와같은 글을 몇번이나 읽고 ‘아 프로그래밍을 할 떄는 반드시 이러한 마음가짐으로 해야지’라고 다짐까지 했건만, 정작 내 앞에 ‘익숙하지 않은’문제들이 다가오면 불쑥 손부터 움직이기 시작한다.</p>
<p>아마 초보 코더의 본능과 같은 것일까?</p>
<p>이번 웹뷰 에러를 디버그 하는 상황에서도 아무런 논리적 근거도 없이 나는 ‘이걸 이렇게 변경하면 되겠지’라는 마음가짐으로 일단 iphone의 simulator를 실행시키려고 했다.</p>
<p>그 때 사부가 잠깐만요! <strong>좀더 천천히 생각해봐요</strong> 하는 말에 ‘아 그렇구나 너무 조급했구나’ 싶었다.</p>
<p>그리고 논리적으로 따져나가니 결국에는 거짓말같이 전혀 단서가 없어보이는 문제가 해결되었다.</p>
<p>이렇게 문제가 해결되는 것을 보며 나는 몇해전 학교 세미나에서 교수님이 하신 말씀이 생각났다.</p>
<blockquote>
<p><strong>사고 정지야 말로 가장 위험한 것이다.</strong></p>
</blockquote>
<p>아무런 생각없이, 아무런 논리적 근거없이 일을 행하는 것은 위험하다는 말씀이었다.</p>
<p>이 말씀을 생각하니 또 세미나에서 교수님이 하신 다른 말씀이 생각났다.</p>
<blockquote>
<p><strong>아무리 복잡해보이는 일이라도 하나하나 MECE(빠짐없이, 중복없이)하게 행한다면 논리적인 문제는 반드시 특정할 수 있다.</strong></p>
</blockquote>
<p>어찌보면 당연한 말이고 나 역시 말을 들을때 마다 고개를 끄덕였던 기억이 있지만 이번에는 언제 그 말을 들었냐는 듯이 망각해버리고 말았다. 사실 이번 뿐 아니라, 다소 어려운 Euler Project문제를 풀 떄도 항상 잊어버리고 만다.</p>
<p>앞으로는 사고정지가 일어날 때 마다 MECE를 떠올려야겠다.</p>
<h2 id="프로그래밍의-신비"><a href="#프로그래밍의-신비" class="headerlink" title="프로그래밍의 신비"></a>프로그래밍의 신비</h2><p>이번에 내가 사고정지에 대한 글을 쓰면서 생각난 프로그래밍의 재미있는 특징은, 프로그래밍에서 나오는 문제는 대부분 ‘끊임없이 생각하는 한 반드시 풀린다’는 점이다.</p>
<p>프로그래밍이 각종 작은 도구들을 조합해서 큰 물건을 만드는 것이기 때문에, 작은 도구들을 논리적으로 이리저리 조합하다 보면 반드시 해답이 나온다는 것이다.</p>
<p>하지만 해답을 찾는 과정을 위에 언급했듯이 <strong>문제를 올바르게 파악하여 해결책에 대하여 숙고한다면</strong> 더더욱 정확하고 빠르게, 그리고 간결하게 해답을 찾을 수 있을 것이다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;오늘-사부와의-미팅에서-배운-것들&quot;&gt;&lt;a href=&quot;#오늘-사부와의-미팅에서-배운-것들&quot; class=&quot;headerlink&quot; title=&quot;오늘 사부와의 미팅에서 배운 것들.&quot;&gt;&lt;/a&gt;오늘 사부와의 미팅에서 배운 것들.&lt;/h2&gt;&lt;ul&gt;
&lt;l
    
    </summary>
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/categories/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/tags/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
      <category term="프로그래밍" scheme="https://voidsatisfaction.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 131</title>
    <link href="https://voidsatisfaction.github.io/2016/10/04/project-euler-131/"/>
    <id>https://voidsatisfaction.github.io/2016/10/04/project-euler-131/</id>
    <published>2016-10-04T12:21:39.000Z</published>
    <updated>2016-10-04T12:32:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Prime-cube-partnership"><a href="#Prime-cube-partnership" class="headerlink" title="Prime cube partnership"></a>Prime cube partnership</h3><hr>
<p>There are some prime values, p, for which there exists a positive integer, n, such that the expression n3 + n2p is a perfect cube.</p>
<p>For example, when p = 19, 83 + 82×19 = 123.</p>
<p>What is perhaps most surprising is that for each prime with this property the value of n is unique, and there are only four such primes below one-hundred.</p>
<p>How many primes below one million have this remarkable property?</p>
<hr>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>  let n^3 + n^2<em>p = (n+k)^3<br>  make it simple, n^2</em>p = 3<em>k</em>n^2 + 3<em>k^2</em>n + k**3</p>
<p>  if n &lt;= k, as n, p, k is all integers, k = n<em>l<br>  n^2</em>p = 3<em>l</em>n^3 + 3<em>l^2</em>n^3 + l^3<em>n^3<br>  p = nl(3 + 3</em>l + l^2)<br>  as p is a prime n and l should be a 1<br>  n = k = 1<br>  p = 7</p>
<p>  if n &gt; k, n = k<em>l<br>  k^2l^2p = 3k(kl)^2 + 3k^2(kl) + k^3<br>  l^2p = 3kl^2 + 3kl + k<br>  Therefore, p = 3k + 3k/l + k/l^2<br>  as p is a prime, k = a</em>l^2, p = 3al^2 + 3al + a = a(3l^2 + 3l + 1)<br>  so, a = 1 p = 3l^2 + 3l + 1</p>
<p>  Based on this fact, we can find all primes satisfing 3l^2 +3l + 1 under one million including p = 7</p>
<p>  Took 0.004sec</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'prime'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Problem131</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">find_ans</span></span></div><div class="line">    i = <span class="number">1</span>; cache = []</div><div class="line">    loop <span class="keyword">do</span></div><div class="line">      value = <span class="number">3</span>*i**<span class="number">2</span> + i*<span class="number">3</span> + <span class="number">1</span></div><div class="line">      <span class="keyword">break</span> <span class="keyword">if</span> value &gt; <span class="number">10</span>**<span class="number">6</span></div><div class="line">      cache.push(value) <span class="keyword">if</span> value.prime?</div><div class="line">      i += <span class="number">1</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    cache.length</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">start = Time.now</div><div class="line">p Problem131.find_ans</div><div class="line">p Time.now - start</div></pre></td></tr></table></figure>
<h2 id="Efficiency"><a href="#Efficiency" class="headerlink" title="Efficiency"></a>Efficiency</h2><p>O(n)</p>
<h2 id="Afterthoughts"><a href="#Afterthoughts" class="headerlink" title="Afterthoughts"></a>Afterthoughts</h2><p>Other solution.</p>
<p>from umu</p>
<p>What a beautiful nice little problem. Same as most of you, I guess. If n=ap, then n³+n²p=(a³+a²)p³, then a³+a² must be a cube, what is impossible, as next cube after a³ is a³+3a²+3a+1. So n and p are coprime, so are n² and n+p. So if n³+n²p=n²(n+p) is a cube, so n² and n+p are cubes, so n and n+p are cubes. (n+a)³-n³=3a+3a²+a³ is never prime for a&gt;1. So n and n+p are consecutive cubes. So it’s enough to check all differences between consecutive cubes for being prime.</p>
<p>정수론은 어렵지만 다가기는 생각보다 쉽고 흥미롭다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;h3 id=&quot;Prime-cube-partnership&quot;&gt;&lt;a href=&quot;#Prime-cube-
    
    </summary>
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/categories/Ruby/"/>
    
      <category term="Project Euler" scheme="https://voidsatisfaction.github.io/categories/Ruby/Project-Euler/"/>
    
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/tags/Ruby/"/>
    
      <category term="Project Euler" scheme="https://voidsatisfaction.github.io/tags/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 123</title>
    <link href="https://voidsatisfaction.github.io/2016/09/30/project-euler-123/"/>
    <id>https://voidsatisfaction.github.io/2016/09/30/project-euler-123/</id>
    <published>2016-09-30T03:54:33.000Z</published>
    <updated>2016-09-30T04:15:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Prime-square-remainders"><a href="#Prime-square-remainders" class="headerlink" title="Prime square remainders"></a>Prime square remainders</h3><h4 id="Problem-123"><a href="#Problem-123" class="headerlink" title="Problem 123"></a>Problem 123</h4><hr>
<p>Let pn be the nth prime: 2, 3, 5, 7, 11, …, and let r be the remainder when (pn−1)n + (pn+1)n is divided by pn2.</p>
<p>For example, when n = 3, p3 = 5, and 43 + 63 = 280 ≡ 5 mod 25.</p>
<p>The least value of n for which the remainder first exceeds 109 is 7037.</p>
<p>Find the least value of n for which the remainder first exceeds 1010.</p>
<hr>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>n is the n term of prime. if so,<br>remainder = (Pn-1)^n + (Pn+1)^n === n<em>Pn</em>({1+[-1]^(n-1)} + {1 + [-1]^(n)}) (mod Pn^2)</p>
<p>In this situation, n should be odd since the remainder is 2 if n is even.</p>
<p>Therefore, remainder is 2<em>n</em>Pn (n is odd)</p>
<p>Based on this fact, we can get first nth prime that exceeds 10^10 by using bruteforce.</p>
<p>Efficiency O(n^(3/2))<br>Took 1.8sec</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Problem123</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">find_ans</span></span></div><div class="line">    limit = <span class="number">10</span>**<span class="number">10</span> ; i = <span class="number">3</span> ; n = <span class="number">1</span></div><div class="line">    loop <span class="keyword">do</span></div><div class="line">      <span class="keyword">if</span> prime?(i)</div><div class="line">        <span class="keyword">if</span> n % <span class="number">2</span> === <span class="number">1</span></div><div class="line">          n += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">          n += <span class="number">1</span></div><div class="line">          value = <span class="number">2</span>*n*i</div><div class="line">          <span class="keyword">return</span> n <span class="keyword">if</span> value &gt; limit</div><div class="line">        <span class="keyword">end</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">      i += <span class="number">2</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">prime?</span><span class="params">(n)</span></span></div><div class="line">    <span class="number">2</span>.upto(Math.sqrt(n))&#123; <span class="params">|i|</span> <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> n % i === <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">start = Time.now</div><div class="line">p Problem123.find_ans</div><div class="line">p Time.now - start</div></pre></td></tr></table></figure>
<h2 id="Efficiency"><a href="#Efficiency" class="headerlink" title="Efficiency"></a>Efficiency</h2><p>O(n^(3/2))</p>
<h2 id="Afterthoughts"><a href="#Afterthoughts" class="headerlink" title="Afterthoughts"></a>Afterthoughts</h2><p>hk’s solution on forum was quite interesting.</p>
<p>he used the fact that</p>
<blockquote>
<p>the number of primes less than n tends to n/ln(n)</p>
</blockquote>
<p>then, n can be substituted by n/ln(n).<br>thus, remainder could be substituted by 2*Pn^2/ln(n)</p>
<p>Of course, according to <a href="https://en.wikipedia.org/wiki/Prime_number_theorem" target="_blank" rel="external">Prime number theorem - Wikipedia</a>,</p>
<p>pi(n) is almost equal to(~) n/ln(n).</p>
<blockquote>
<p>the asymptotic notation meaning, again, that the relative error of this approximation approaches 0 as n increases without bound.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;h3 id=&quot;Prime-square-remainders&quot;&gt;&lt;a href=&quot;#Prime-squa
    
    </summary>
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/categories/Ruby/"/>
    
      <category term="Project Euler" scheme="https://voidsatisfaction.github.io/categories/Ruby/Project-Euler/"/>
    
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/tags/Ruby/"/>
    
      <category term="Project Euler" scheme="https://voidsatisfaction.github.io/tags/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 124</title>
    <link href="https://voidsatisfaction.github.io/2016/09/29/projecteuler124/"/>
    <id>https://voidsatisfaction.github.io/2016/09/29/projecteuler124/</id>
    <published>2016-09-29T14:40:35.000Z</published>
    <updated>2016-09-29T14:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Ordered-radicals"><a href="#Ordered-radicals" class="headerlink" title="Ordered radicals"></a>Ordered radicals</h3><h4 id="Problem-124"><a href="#Problem-124" class="headerlink" title="Problem 124"></a>Problem 124</h4><hr>
<p><strong><a href="https://projecteuler.net/problem=124" target="_blank" rel="external">problem is here</a></strong></p>
<hr>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li><p>bruteforce</p>
</li>
<li><p>dictionary</p>
</li>
</ul>
<p>You can define rad function by using prime_division method.</p>
<p>And from 1 to 100000, you can get each of rad value.</p>
<p>If a number’s rad is not included in cache, create new array of the rad value set.<br>If it is included, just add on the rad value set</p>
<p>After that, you can easily get E(10000)</p>
<figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'prime'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Problem124</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">find_ans</span></span></div><div class="line">    cache = &#123;&#125;</div><div class="line">    <span class="number">1</span>.upto(<span class="number">10</span>**<span class="number">5</span>) <span class="keyword">do</span> <span class="params">|i|</span></div><div class="line">      rad = rad(i).to_s</div><div class="line">      cache.has_key?(rad) ? cache[rad].push(i) : cache[rad] = [i]</div><div class="line">    <span class="keyword">end</span></div><div class="line">    cache.values.flatten[<span class="number">9999</span>]</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">rad</span><span class="params">(n)</span></span></div><div class="line">    value = <span class="number">1</span></div><div class="line">    Prime.prime_division(n).each&#123; <span class="params">|e|</span> value *= e.first &#125;</div><div class="line">    value</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">start = Time.now</div><div class="line">p Problem124.find_ans</div><div class="line">p Time.now - start</div></pre></td></tr></table></figure>
<h2 id="Efficiency"><a href="#Efficiency" class="headerlink" title="Efficiency"></a>Efficiency</h2><p>O(n^(3/2))</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;h3 id=&quot;Ordered-radicals&quot;&gt;&lt;a href=&quot;#Ordered-radicals&quot;
    
    </summary>
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/categories/Ruby/"/>
    
      <category term="Project Euler" scheme="https://voidsatisfaction.github.io/categories/Ruby/Project-Euler/"/>
    
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/tags/Ruby/"/>
    
      <category term="Project Euler" scheme="https://voidsatisfaction.github.io/tags/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title>파인만 알고리즘</title>
    <link href="https://voidsatisfaction.github.io/2016/09/29/feynman-algoritm/"/>
    <id>https://voidsatisfaction.github.io/2016/09/29/feynman-algoritm/</id>
    <published>2016-09-29T04:48:51.000Z</published>
    <updated>2016-09-29T05:29:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><p><a href="http://m.chosun.com/svc/article.html?sname=news&amp;contid=2016092703250&amp;Dep0=m.facebook.com" target="_blank" rel="external">[과학의 창]내부와 외부, 그리고 경계 - 조선일보</a></p>
<h2 id="파인만-알고리즘-알고리즘-문제풀이"><a href="#파인만-알고리즘-알고리즘-문제풀이" class="headerlink" title="파인만 알고리즘(알고리즘 문제풀이)"></a>파인만 알고리즘(알고리즘 문제풀이)</h2><ol>
<li>해결하려는 문제를 종이에 쓴다.(문제의 이해)</li>
<li>정말 골똘히 그 해결책을 생각한다.(알고리즘의 설계)</li>
<li>답을 쓴다.(코딩)</li>
</ol>
<h2 id="내용"><a href="#내용" class="headerlink" title="내용"></a>내용</h2><p>###[과학의 창] 내부와 외부, 그리고 경계</p>
<p>김범준 성균관대 물리학과 교수 | 2016/09/28 03:05</p>
<p>물리학자 파인만이 이용했다고 일컬어지는 일반적인 문제 해결 알고리듬이 있다. 숙지하면 이 방법으로 풀지 못할 문제가 없다. 독자들도 귀를 열고 주의 깊게 들어보시길. 파인만 알고리듬은 다음의 세 단계로 이루어진다. 첫째, 해결하려는 문제를 종이에 쓴다. 둘째, 정말 골똘히 그 해결책을 생각한다. 셋째, 답을 쓴다.</p>
<p>정말 쉽지 않은가. 처음 내가 이 이야기를 들었을 때는 그냥 농담인 줄 알았다. ‘파인만씨, 농담도 잘하시네!’라는 책 제목에서도 알 수 있듯 파인만은 물리뿐 아니라 농담도 정말 잘했던 사람이다.(참고로 물리학자들은 “물리학을 연구한다”고 하지 않고, 보통 “물리를 한다”고 말한다. 파인만은 물리 하는 사람이면 누구나 다 인정하는, 정말 물리를 잘했던 사람이다.) 나도 물리를 하며 살아온 세월이 좀 늘다 보니, 파인만 알고리듬에 대해 더 이해할 수 있게 되었다. 많은 독자가 이 해결 알고리듬의 가장 중요한 단계가 문제의 해결책을 고민하는 둘째 단계라고 짐작하겠지만, 그렇지 않다. 사실 가장 중요한 것은 문제를 종이에 쓰는 첫 단계다. 왜 그럴까.</p>
<p>문제를 풀 때, 가장 중요한 단계는 바로 문제가 뭔지를 아는 거다. 문제가 무엇인지를 알 때에만 문제를 종이에 적을 수 있다. 혹은, 문제를 종이 위에 적으려 노력하는 단계를 거쳐야만 문제가 명확해지기도 한다. 스스로 종이에 적지 못할 문제는 결코 해결할 수도 없다. 물리학자가 연구할 때도 마찬가지여서, 가장 중요한 단계가 바로 문제가 뭔지를 아는 거다. 문제가 무엇인지 파악할 때, 물리학자가 처음 거쳐야 하는 사고의 첫 관문이 있다. 오늘 할 얘기가 바로 이 부분이다. 물리학자는 문제를 종이에 적는 파인만 알고리듬 첫 단계의 맨 앞에서 먼저 ‘경계’를 설정한다. 안과 밖의 경계다. 무슨 얘길까.</p>
<p>공기 중에서 떨어지는 돌멩이의 운동을 이해하고자 하는 물리학자가 있다. 이 학자가 처음 하는 일은 이 물체의 운동을 이해하기 위한 사고의 체계 안에 도대체 무엇 무엇을 집어넣을까 하는 고민이다. 딱 돌멩이 하나만을 문제의 내부에 넣고, 돌멩이를 제외한 우주의 모든 것을 외부로 해서 둘 사이의 경계를 설정한다면 어떨까. 이 경우 돌멩이를 아래로 당기는 것이 내부에 없으니 돌멩이는 떨어질 수가 없고, 따라서 문제를 이렇게 적었다면 잘못 적은 거다. 당연히 문제의 내부에 다른 것을 더 넣어야 한다. 바로 돌멩이를 아래로 잡아끄는 지구의 중력이다. 자, 이제 돌멩이와 지구의 중력만을 문제의 내부(이 내부를 물리학자는 계(系), 혹은 시스템이라 부른다)로 생각해 이 둘과 우주의 나머지 모든 것 사이에 안과 밖의 경계를 설정하면 어떨까. 이 경우 돌멩이는 아래로 떨어지지만, 공기는 여전히 경계의 밖에 있으니 돌멩이는 공기에 의한 저항력을 느끼지 못한다. 공기의 효과까지 넣으려면 이제 경계는 조금 더 확장된다. 문제가 복잡할수록, 문제를 정확히 기술하기 위해 노력할수록, 내부와 외부를 나누는 경계는 시스템의 밖을 향해 확장된다. 확장된 경계로 둘러싸인 큰 시스템에서 문제의 해결은 점점 더 어려워지지만, 어려운 것이 두려워 우주 전체에서 너무 작게 시스템을 도려낸다면 말도 안 되는 엉뚱한 결과를 얻게 된다. 마치 아래로 떨어지지 않는 돌멩이처럼.</p>
<p>우리가 살아가는 사회에서 벌어지는 문제는, 아래로 떨어지는 돌멩이에 비하면 정말 복잡하다. 복잡한 현실의 문제를 이해하려면 내부와 외부 사이의 경계를 현명하게 설정하는 것이 필요하다. 경계가 분명하지 않을 때는 내부를 크게 설정하는 것이, 중요한 무엇을 외부로 배제해 잘못된 해결책을 찾는 것보다는 훨씬 더 바람직하다. 우리나라에서 벌어지는 일이라면 우리 모두는 내부라 할 수 있다. 우리 안에 외부는 없다.</p>
<h2 id="다른-좋은-글"><a href="#다른-좋은-글" class="headerlink" title="다른 좋은 글"></a>다른 좋은 글</h2><p><a href="http://thoughts.chkwon.net/feynman-algorithm/" target="_blank" rel="external">Feynman Algorithm(파인만 알고리즘) - 잡생각 전문 블로그 </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://m.chosun.com/svc/article.html?sname=news&amp;amp;contid=20
    
    </summary>
    
      <category term="교육" scheme="https://voidsatisfaction.github.io/categories/%EA%B5%90%EC%9C%A1/"/>
    
    
      <category term="프로그래밍" scheme="https://voidsatisfaction.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
      <category term="알고리즘" scheme="https://voidsatisfaction.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
  </entry>
  
  <entry>
    <title>불교와 프로그래밍</title>
    <link href="https://voidsatisfaction.github.io/2016/09/29/buddhism-and-programming/"/>
    <id>https://voidsatisfaction.github.io/2016/09/29/buddhism-and-programming/</id>
    <published>2016-09-29T02:08:18.000Z</published>
    <updated>2016-09-29T05:37:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="법륜스님의-즉문즉설"><a href="#법륜스님의-즉문즉설" class="headerlink" title="법륜스님의 즉문즉설"></a>법륜스님의 즉문즉설</h2><p>나는 요즈음 학교 도서관에 갈 때 팟캐스트 ‘법륜 스님의 즉문즉설’을 즐겨 듣는다.</p>
<p>‘법륜스님의 즉문즉설’은 법륜스님이 한국과 세계의 이곳저곳을 돌아다니시면서 강연하시는 내용이다. 여기서 특이한 점은, 스님이 일방적으로 자신의 생각과 견해를 전하는 것이 아니라는 점이다.</p>
<p>항상 스님은 질문자의 질문을 먼저 듣고 그것에 대한 답변을 하신다.</p>
<p>질문의 내용을 조금 발췌해보자면 다음과 같다.</p>
<ul>
<li><p>부모님과의 사이가 좋지 않다. 어떻게 해야하는가?</p>
</li>
<li><p>아이가 공부를 안하는데 어떻게 하면 좋을까?</p>
</li>
<li><p>내가 화를 잘 참지 못한다. 어떻게 해야하는가?</p>
</li>
<li><p>시어머니와의 사이가 좋지 않은데 어떻게 해야하는가?</p>
</li>
<li><p>이 세상은 올바르게 사는 사람이 더 손해보는 것 같다. 나는 어떻게 살아야 하는가?</p>
</li>
</ul>
<p>에피소드 하나 하나가 5~20분 사이로 생각보다 길지도 않고 정말 나도 한 번쯤은 생각해봤을 그런 문제들이며 현실과 동떨어지지 않은것 같아서 내용이 공감도 되고 참 재미있다.</p>
<p>하지만 즉문즉설의 백미는 역시 법륜스님의 명쾌한 대답이다.</p>
<h2 id="즉문즉설을-관통하는-세가지-사고방식"><a href="#즉문즉설을-관통하는-세가지-사고방식" class="headerlink" title="즉문즉설을 관통하는 세가지 사고방식"></a>즉문즉설을 관통하는 세가지 사고방식</h2><p>스님의 즉설을 듣고 있으면 언제나 세가지 원칙이 있다는 것을 느낀다.</p>
<ol>
<li><p>모든 문제는 ‘나’에게 있다. 따라서 문제의 해결의 열쇠 역시 ‘나’에게 있다.</p>
</li>
<li><p>나는 나고 너는 너. 내 마음대로 타인을 변화시키려 하지마라.</p>
</li>
<li><p>기대하지 마라.</p>
</li>
</ol>
<h3 id="모든-문제는-‘나’에게-있다"><a href="#모든-문제는-‘나’에게-있다" class="headerlink" title="모든 문제는 ‘나’에게 있다."></a>모든 문제는 ‘나’에게 있다.</h3><p>즉문즉설에서 질문자는 간혹 ‘~때문에 화가나거나 힘들다. 그렇다면 어떻게 그를 고쳐야 하는가?’ 와 같은 질문을 할 때가 있다.</p>
<p>그럴때 스님은 항상 모든 문제의 핵심은 바로 나 자신에게 있다고 말씀하신다.</p>
<p>그러므로 내가 어떠한 마음가짐을 가지느냐에 따라 문제를 해결할 수 있다고 하신다.</p>
<p>예를 들어, 남편이 매일 술을 마시고 들어와 화가났을 경우, 스님은 다음과 같이 조언하신다.</p>
<blockquote>
<p>‘매일아침 하루 빠짐없이 매일 우리 남편 술을 꼭 먹고 들어오게 해주십시오’를 생각하며 108배를 하시죠.</p>
<p>그리고 오히려 술을 마시고 오지 않을 경우는 술을 준비해서 그 기도를 이루도록 해야합니다.</p>
</blockquote>
<p>여기서 포인트는 <strong>마음에서 우러나와서</strong> 그렇게 해야 한다는 것이다.</p>
<p>그러면 3년 정도 후에는 남편의 술주정이 줄어들고 거짓말 같이 술을 마시지 않게 된다는 것이며, 자기자신의 생활이 술에 대한 스트레스가 사라짐과 동시에 보다 편해진다는 것이다.</p>
<p>나는 이 조언이 스님이 이야기하고자 하는 삶의 지혜를 고스란히 보여주고 있다고 생각한다.</p>
<p>그 지혜 중 하나는, 스트레스의 원인을 <strong>자기자신의 마음</strong> 으로 지목하신 것이다.</p>
<p>질문자는 남편이 술을 마시는 행위를 자기자신을 스트레스 받게하는 요소로 생각하고 있다.</p>
<p>하지만 스님은 술을 마시는 행위를 스트레스의 요소가 아닌, <strong>긍정적인 요소</strong> 로 발상의 전환을 제안한다.</p>
<p>이것이 사고의 역전이자 즉문즉설의 백미.</p>
<h3 id="나는-나고-너는-너-내-마음대로-타인을-변화시키려-하지마라"><a href="#나는-나고-너는-너-내-마음대로-타인을-변화시키려-하지마라" class="headerlink" title="나는 나고 너는 너. 내 마음대로 타인을 변화시키려 하지마라."></a>나는 나고 너는 너. 내 마음대로 타인을 변화시키려 하지마라.</h3><p>또한 스님의 말씀에는 또 다른 지혜의 아름다움이 숨겨져 있는데 그것은 다름아닌 <strong>타인의 문제와 나와의 분리</strong> 다.</p>
<p>질문자는 분명 남편을 변화시킬 방법을 스님에게 묻고싶었겠지만, 스님은 ‘술을 마시는 일’자체를 내가 원하는대로 변화시키는 것은 욕심이라고 하신다.</p>
<p>사실 우리의 삶에서 타인의 행동을 긍정적인 방향이든 부정적인 방향이든 변화시키는 것은 정말 쉽지 않은 일이다.</p>
<p>내가 아무리 노력해도 그 사람은 내 노력을 티끌로도 보지 않는 경우도 심심치 않게 볼 수 있다.</p>
<p>따라서 만일 내가 타인을 변화시키는 것이 나의 과제이자 숙명으로 여기면 그 짐으로 인한 무게가 내 삶 자체를 짓누를 것이다.</p>
<p>그래서 스님은 <strong>애초에 타인의 짐을 자신이 짊어질 필요가 없다</strong> 고 역설하신 것이라고 생각한다.</p>
<p>이와 같은 마음가짐은 타인은 타인이 그러한 행동을 하는 자유가 있다는 것을 존중하는 동시에 나 자신의 짐도 덜어버리는 것이다.</p>
<h3 id="기대하지-마라"><a href="#기대하지-마라" class="headerlink" title="기대하지 마라."></a>기대하지 마라.</h3><p>마지막으로 스님은 ‘기대하지 말라’고 충고하신다.</p>
<p>대개 사람들은 기도를 하면서 자신을 둘러싼 환경이 변화가 되길 기대한다.</p>
<p>하지만, 기대를 하므로써 우리는 ‘기대’라는 이름의 새로운 짐을 짊어지게 되는 것이다.</p>
<p>만일 내 기대가 이루어지지 않는다면 그 기대라는 짐은 또다시 무거운 고뇌가 되어 나의 어깨를 누를것이다.</p>
<p>그래서 스님은 무주상보시(無住相布施). 즉, 어떠한 행위의 결과에서 아무런 기대를 하지 않는 마음의 중요성을 강조하신다. 중요한 것은 그 행위를 하는 것이지 행위의 결과는 자신의 마음과 아무 상관이 없다는 것이다.</p>
<hr>
<h2 id="프로그래밍과-불교"><a href="#프로그래밍과-불교" class="headerlink" title="프로그래밍과 불교"></a>프로그래밍과 불교</h2><p>법륜스님의 위의 세가지 원칙과 더 나아가 불교의 가르침은 프로그래밍의 세상과 일맥상통하는 부분이 있다.</p>
<p>다음과 같이 생각해보자.</p>
<p>가장 먼저, ‘나’는 나를 둘러싼 세상의 환경적 요소를 인수로서 받는 함수라고 생각한다.</p>
<p>그리고 그 함수 내부에는 내가 세상을 바라보는 시선 즉. 세상을 바라보는 알고리즘이 들어있는것이다.</p>
<p>이를 코드화한다면 다음과 같을 것이다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">me</span> (<span class="params">나를 둘러싼 환경인수들</span>)</span>&#123;</div><div class="line">  내가 어떻게 환경을 바라보는가?</div><div class="line">  내가 어떻게 환경을 활용하는가?</div><div class="line">&#125;</div><div class="line"></div><div class="line">me(환경인수들) <span class="comment">// 이것이 내가 세상에 살아가는 output. 내가 세상을 살아가는 모습</span></div></pre></td></tr></table></figure>
<p>우리들은 보통 나를 둘러싼 환경인수들을 탓하며 무리하게 환경을 바꾸려고 한다.</p>
<p>하지만 법륜스님을 비롯한 불교의 가르침은 내가 제어할 수 없는 환경 인수에 초점을 맞추는 것이 아닌,</p>
<ul>
<li>내가 어떻게 환경을 바라보는가?</li>
<li>내가 어떻게 나에게 주어진 환경을 활용하는가?</li>
</ul>
<p>와 같은 ‘나’의 마음에 좋은 알고리즘을 만드려는 구상에 초점을 맞춘다.</p>
<p>사실 프로그래밍에서도 그렇듯이 함수의 output을 환경인수를 간단히 변경하는게 언뜻 보면 쉬울 것 같아보인다.</p>
<p>하지만 또 우리가 평소 생활하면서 느끼듯이</p>
<p><strong>타인을 내가 원하는 방향으로 변화시키는 것은 쉽지 않다. 또한, 타인을 변화시켰을때는 반드시 부작용이 따른다.</strong></p>
<p>하지만 그에 반하여, 잘 정의된 함수는 인수에 object가 오든, string이 오든 어떠한 자료구조, 어떠한 데이터 형태가 input으로 들어와도 원하는 output으로 변화시킬 수 있다.</p>
<p>따라서 우리는 어떠한 일이 내가 바라는 바 처럼 되길 바라고 기도하는 것이 아니라,<br><strong>어떠한 일이 닥치더라도 흔들리지 않는 그런 마음을 갖게 될 수 있도록 기도해야한다.</strong></p>
<p>나는 어떠한 input이 오든 흔들리지 않고 나만의 신념을 지킬 수 있는 output을 낼 수 있는 그런 하나의 함수가 되고 싶다.</p>
<p>그래서 이제 나는 나에게 묻고자 한다. ‘나는 어떤 함수인가?’ ‘나의 함수는 환경인수를 제어하려 하는가, 아니면 내 마음의 좋은 알고리즘을 만드려하는가?’</p>
<hr>
<p>나는 종교를 믿지 않지만 어느종교이든 아름다운 말과 생각에는 그 특유의 향기가 있는 것을 느낀다.</p>
<p>마치, 절차지향적, 객체지향, 함수형, 선언형 프로그래밍 등등.. 각각의 프로그래밍 스타일이 고유의 매력을 뽑내는 것과 같이.</p>
<p>또한 각각의 프로그래밍 스타일도 궁극적으로 <strong>‘좋은 프로그램을 작성한다.’</strong> 라는 공통된 궁극적인 지향점 있듯이, 모든 종교도 <strong>‘향기롭고 아름다운 삶을 산다’</strong> 라는 공통의 궁극적인 지향점 있다고 생각한다.</p>
<p>이렇게 잘 생각해보면 세상을 살아가는 이치가 프로그래밍에도 곳곳에 스며들어있는 것이 아닌가 싶다.</p>
<p>작지만 나의 배움을 바탕으로 세상을 이런식으로 나만의 방식으로 의미부여를 해가는것은 참 재밌다.</p>
<p>같은 세상이라도 나에게는 조금 더 특별해 보이니까.</p>
<p>항상 좋은 말씀 감사합니다 법륜스님.</p>
<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul>
<li><a href="http://www.podbbang.com/ch/1805" target="_blank" rel="external">법륜스님의 즉문즉설 팟캐스트</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;법륜스님의-즉문즉설&quot;&gt;&lt;a href=&quot;#법륜스님의-즉문즉설&quot; class=&quot;headerlink&quot; title=&quot;법륜스님의 즉문즉설&quot;&gt;&lt;/a&gt;법륜스님의 즉문즉설&lt;/h2&gt;&lt;p&gt;나는 요즈음 학교 도서관에 갈 때 팟캐스트 ‘법륜 스님의 즉문즉설’을
    
    </summary>
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/categories/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/tags/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
      <category term="프로그래밍" scheme="https://voidsatisfaction.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
      <category term="불교" scheme="https://voidsatisfaction.github.io/tags/%EB%B6%88%EA%B5%90/"/>
    
  </entry>
  
  <entry>
    <title>React Native 공부기 ~ Redux 후편</title>
    <link href="https://voidsatisfaction.github.io/2016/09/27/redux-study2/"/>
    <id>https://voidsatisfaction.github.io/2016/09/27/redux-study2/</id>
    <published>2016-09-27T08:37:59.000Z</published>
    <updated>2016-09-27T10:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="지난번에-공부한-것들"><a href="#지난번에-공부한-것들" class="headerlink" title="지난번에 공부한 것들"></a>지난번에 공부한 것들</h2><ul>
<li><p>props의 공급원</p>
</li>
<li><p>dispatch(action.login(sessionID))의 의미</p>
</li>
<li><p>Redux의 매커니즘</p>
</li>
</ul>
<h2 id="다시-이야기로-돌아와서"><a href="#다시-이야기로-돌아와서" class="headerlink" title="다시 이야기로 돌아와서"></a>다시 이야기로 돌아와서</h2><p><img src="https://css-tricks.com/wp-content/uploads/2016/03/redux-article-3-03.svg" alt="redux"></p>
<p>저런식으로 redux에 state을 저장해서 다른 컴포넌트들이 그걸 참조하는거에요.</p>
<p><strong>Q) 그럼 dumbcomponent에서 데이터가변화 =&gt; screen으로 데이터가 감 =&gt; action생성 =&gt; dispather에 의한 redux상의 데이터변화(reducer)</strong> 요로코롬 이해하면 될까?</p>
<p>네.</p>
<p>아 이제 완벽히 이해된다.</p>
<p>connect가 뭔지도 아시겟죠?</p>
<p>다른 일반적인 react-redux아키텍쳐랑 조금 달라서 아마 어려울수도 있었을거에요.</p>
<ul>
<li>dumbcomponent에서 데이터가변화 =&gt; screen으로 데이터가 감 =&gt; action생성 =&gt; dispather에 의한 redux상의 데이터변화(reducer)</li>
</ul>
<p>이게 아니라,</p>
<ul>
<li>dumbcomponent에서 데이터가변화 =&gt; action생성 =&gt; dispather에 의한 redux상의 데이터변화(reducer)</li>
</ul>
<p>이거여서.</p>
<p>보통은 react의 state을 아에 쓰지 않거든요.</p>
<p>web front 의 경우에는 그냥 전부다 redux로 처리하니까 textInput 같은것도 redux state를 바꾸는걸로 해요.</p>
<p>근데 저희는 redux state을 핸드폰에다가 저장을 해놔서</p>
<p>그렇게 자잘한걸 전부다 redux로 처리를 하면 퍼포먼스가 나빠질 것 같아서, 적절히 나눈거구요.</p>
<p>대충 redux 에 대해 이해가 되셧나요?</p>
<hr>
<p><strong>Q) redux로 처리하는것과 react자체 state로 처리하는 것의 차이는 뭐야?</strong></p>
<ul>
<li><p>redux로 처리는 action, dispatch을 이용해서 redux의 state를 바꿔서 view을 바꾸는 거구요.</p>
</li>
<li><p>react 자체 state는 this.setState을 통해서 view를 바꾸는 거죠.</p>
</li>
</ul>
<p>그리고 사실 redux로 처리를 하면 <code>action -&gt; middleware -&gt; reducer</code>의 형태로 redux state가 변경되는데, 이 과정에서 여러가지를 할수가 있어요</p>
<p>반면에 setState는 setState 만으로 값을 바꾸는 거여서 복잡한 처리에는 좋지 않아요.</p>
<p>그렇지 middleware에서 데이터를 가공하든 다른곳에 통신을 하던 할 수 있으니까 redux는</p>
<p><strong>Q) 근데 내 짧은 생각으로는 아무래도 redux가 여러가지 모듈을 거치니까 더 느릴거 같다는 생각이드는데..</strong></p>
<p>redux가 더 느릴걸요.</p>
<p>더 느린데 할수있는게 많은거죠.</p>
<p>자유도 라고 해야하나요.</p>
<p>일단은 액션만 생성하면 redux의 정보를 변경할 수 있어요.</p>
<h2 id="this-props-lecture는-어디에서-오는가"><a href="#this-props-lecture는-어디에서-오는가" class="headerlink" title="this.props.lecture는 어디에서 오는가?"></a>this.props.lecture는 어디에서 오는가?</h2><p>아 그 props 가 어디서 오는지 설명해 드릴게요.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">screen/LectureDetailScreen</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</div><div class="line">  <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">timeTable</span>: state.timeTable,</div><div class="line">  &#125;),</div><div class="line">  () =&gt; (&#123;&#125;),</div><div class="line">  (stateProps, dispatchProps, ownProps) =&gt; (&#123;</div><div class="line">    ...dispatchProps,</div><div class="line">    ...ownProps,</div><div class="line">    <span class="attr">lecture</span>: stateProps.timeTable[ownProps.day][ownProps.time],</div><div class="line">  &#125;)</div><div class="line">)(<span class="class"><span class="keyword">class</span> <span class="title">LectureDetailScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>this.props.timeTable에 state.timeTable을 연결시켜요</p>
<p>또한, connect의 3번째 인수는</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(stateProps, dispatchProps, ownProps) =&gt; (&#123;</div><div class="line">   ...dispatchProps,</div><div class="line">   ...ownProps,</div><div class="line">   <span class="attr">lecture</span>: stateProps.timeTable[ownProps.day][ownProps.time],</div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
<p>이런 함수인데</p>
<p>여기서 state.Props는 저기 위에 있는 <code>{ timeTable: state.timeTable }</code>가 들어가 있어요.</p>
<p>그리고 ownProps는 원래 얘가 가지고 있는 props을 의미해요.</p>
<p>lectureDetail은 timeTableScreen 에서 오는 얘인데</p>
<p>그때 <code>Action.lectureDetail({ day, time})</code>으로 보냈으니 <code>this.props.day, this.props.time</code> 을 받게 되죠</p>
<p>ownProps.day과 ownProps.time 은 timeTable에서 받은 day와 time 이에요</p>
<p>우리가 lectureDetail에서 필요한건 timeTable이 아니라 특정 timeTable안에 있는 특정 lecture 이기 때문에,</p>
<p><strong><code>lecture: stateProps.timeTable[ownProps.day][ownProps.time],</code> 이걸 써서 this.props.lecture에 lecture을 주는거에요.</strong></p>
<p>그래서 우리는 컴포넌트 안에서 this.props.lecture 만으로 얘의 lecture을 알수가 있죠.</p>
<p>사실 그냥 <code>this.props.lecture = this.props.timeTable[this.props.day][this.props.time]</code> 와 같이 해도 되는데</p>
<p>저건 별로 좋지도 않고</p>
<p><strong>데이터 가공이랑 데이터 사용을 분리해서 적어놔야 보기가 편해요.</strong></p>
<p>“아 이 컴포넌트는 lecture을 쓰는구나 timeTable 전체를 안쓰는군.” 이렇게요.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">screen/scheduleScreen</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> timetableScheduleItems = state.timeTable ? state.timeTable.reduce(<span class="function">(<span class="params">sum, dayTimetable</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> dayTimetableSchedules = dayTimetable.reduce(<span class="function">(<span class="params">daySum, lecture</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> timelines = lecture.timelines.map(<span class="function">(<span class="params">timeline</span>) =&gt;</span> (&#123;</div><div class="line">        ...timeline.info,</div><div class="line">        <span class="attr">lectureName</span>: lecture.lectureDPName,</div><div class="line">      &#125;));</div><div class="line">      <span class="keyword">return</span> [...daySum, ...timelines];</div><div class="line">    &#125;, []);</div><div class="line">    <span class="keyword">return</span> [...sum, ...dayTimetableSchedules];</div><div class="line">  &#125;, []) : [];</div><div class="line">  <span class="keyword">const</span> scheduleItems = [</div><div class="line">    ...timetableScheduleItems,</div><div class="line">    ...state.schedules,</div><div class="line">  ];</div><div class="line">  <span class="keyword">return</span> (&#123;</div><div class="line">    scheduleItems,</div><div class="line">  &#125;);</div><div class="line">&#125;)(<span class="class"><span class="keyword">class</span> <span class="title">ScheduleScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>이건 scheduleScreen 인데 얘도 timeTable을 가공해서 shceduleItem을 만드는거에요.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;지난번에-공부한-것들&quot;&gt;&lt;a href=&quot;#지난번에-공부한-것들&quot; class=&quot;headerlink&quot; title=&quot;지난번에 공부한 것들&quot;&gt;&lt;/a&gt;지난번에 공부한 것들&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;props의 공급원&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/categories/JavaScript/React-Native/"/>
    
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/tags/React-Native/"/>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/tags/JavaScript/"/>
    
      <category term="Redux" scheme="https://voidsatisfaction.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>React Native 공부기 ~ Redux 전편</title>
    <link href="https://voidsatisfaction.github.io/2016/09/27/redux-study1/"/>
    <id>https://voidsatisfaction.github.io/2016/09/27/redux-study1/</id>
    <published>2016-09-27T05:17:03.000Z</published>
    <updated>2016-09-27T08:39:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="나의-질문"><a href="#나의-질문" class="headerlink" title="나의 질문"></a>나의 질문</h2> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">_showAddLectureRatingScreen() &#123;</div><div class="line">  <span class="keyword">const</span> &#123; lecture &#125; = <span class="keyword">this</span>.props;</div><div class="line">  Actions.lectureRatingAdd(&#123;</div><div class="line">    lecture,</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>여기서 lecture를 this.props에서 가져오는데 그 props는 어디에서 오는지가 궁금해</p>
<h2 id="사부의-답변"><a href="#사부의-답변" class="headerlink" title="사부의 답변"></a>사부의 답변</h2><p>props를 가져오는 곳이 3개가 있어요.</p>
<ol>
<li>부모 Component가 주는 경우</li>
<li>Redux가 주는 경우</li>
<li>react-native-router-flux 라이브러리를 사용하는데 그때 화면전환을 할때 Action 을 이용하는데 그 화면전환을 할때 주는경우</li>
</ol>
<p>그렇다면 <code>const { lecture } = this.props;</code> 이건 어디서 가져왔을까요?</p>
<p>그걸 알려면 일단 얘가 screen 컴포넌트인지 자식 컴포넌트인지를 봅니다.</p>
<p><strong>왜냐면 자식컴포넌트는 무조건 부모 component에게만 props을 받고 redux나 router을 사용하지 않기로 했기 때문이죠</strong></p>
<h3 id="Component가-screen일-경우"><a href="#Component가-screen일-경우" class="headerlink" title="Component가 screen일 경우"></a>Component가 screen일 경우</h3><p>부모 component가 없기때문에 redux나 router 입니다<br>근데 redux의 경우에는</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">LectureTimelineScreen과 redux</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</div><div class="line">  <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">user</span>: state.userInfo,</div><div class="line">  &#125;)</div><div class="line">)(<span class="class"><span class="keyword">class</span> <span class="title">LectureTimelineScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>보통 screen은 일반 자식 컴포넌트와 다르게 connect라는 걸로 component을 감싸는데 저 connect가 redux와 연결하는 고리 같은거에요.</p>
<p>저렇게 하면 component에서 this.props.user가 생겨요.<br>그리고 그 this.props.user는 현재 redux의 state의 userInfo가 들어가게 되는거죠<br>그래서 맨위를 보면 redux에서 받는 props을 알수 있어요</p>
<p>userInfo는 Reducer에 있는 userInfo.js 얘가 되는거구요</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">timeTableScreen과 redux</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</div><div class="line">  <span class="attr">timeTable</span>: state.timeTable,</div><div class="line">  <span class="attr">timeTableSetting</span>: state.setting.timeTableSetting,</div><div class="line">&#125;))(<span class="class"><span class="keyword">class</span> <span class="title">timeTableScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>timeTableScreen은 timeTable.js reducer와 setting.js reducer를 참조해서 가져오게 됩니다.</p>
<p>그렇다면 위에 redux에서 정의되지 않는 props는 router에 의해서 가져오는 props라고 생각할 수 있죠.</p>
<p>그렇다면 lectureDetail에서 가지고 있는 this.props.lecture는</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">timeTableScreen의 _clickLecture함수</div><div class="line"></div><div class="line">_clickLecture(time, day, lectureCode) &#123;</div><div class="line">    Actions.lectureDetail(&#123;</div><div class="line">      time,</div><div class="line">      day,</div><div class="line">      lectureCode,</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>timeTableScreen을 보면 저걸로 인해서 어디를 클릭했는지를 알수가 있어요.</p>
<p>월요일 1겐 이면 <code>day: 0 time: 0</code>이 this.props 에 들어가게 되겠죠.</p>
<p>저렇게 해서 화면끼리 데이터를 교환할수 있어요.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">LectureDetail과 redux</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</div><div class="line">  <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">timeTable</span>: state.timeTable,</div><div class="line">  &#125;),</div><div class="line">  () =&gt; (&#123;&#125;),</div><div class="line">  (stateProps, dispatchProps, ownProps) =&gt; (&#123;</div><div class="line">    ...dispatchProps,</div><div class="line">    ...ownProps,</div><div class="line">    <span class="attr">lecture</span>: stateProps.timeTable[ownProps.day][ownProps.time],</div><div class="line">  &#125;)</div><div class="line">)(<span class="class"><span class="keyword">class</span> <span class="title">LectureDetailScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>일단 맨끝만 보면</p>
<p><code>this.props.lecture</code>에 stateProps.timeTable[ownProps.day][ownProps.time],</p>
<p>가 들어간다는걸 알수가 있어요</p>
<p>lecture는 저기에서 오는거에요</p>
<p>그리고 this.props.timeTable 에는 state.timeTable 이 들어가겟죠</p>
<p>여기까지는 이해가 되시나요?</p>
<h2 id="더-깊이-나아가서"><a href="#더-깊이-나아가서" class="headerlink" title="더 깊이 나아가서"></a>더 깊이 나아가서</h2><p><strong>Q) 흠 철아 근데 redux의 state는 schema같이 형태만 정해져있는거야 아니면 정보가 저장되어있는거야?</strong></p>
<p>정보가 저장되어 있어요.<br>형태만 있는게 처음 상태에요</p>
<p>그리고 우리가 dispatch(action.xxxxxx) 이런식으로 쓰는 코드가 있잖아요.<br>그 action이 reducer 에 있는 안에 있는 코드를 불러내요.<br>그러면 그에 알맞게 state가 바뀌게 되는거죠.</p>
<p>가장 쉬운걸로는</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> reducers/session.js</div><div class="line"></div><div class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = initialState, action = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="comment">// focus action is dispatched when a new screen comes into focus</span></div><div class="line">    <span class="keyword">case</span> LOG_IN :</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...state,</div><div class="line">        <span class="attr">sessionID</span>: action.sessionID,</div><div class="line">        <span class="attr">logged</span>: <span class="literal">true</span>,</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> LOG_OUT :</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...state,</div><div class="line">        <span class="attr">sessionID</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">logged</span>: <span class="literal">false</span>,</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이렇게 되어 있잖아요</p>
<p>LoginScreen 보면 로그인 성공하면</p>
<p><code>dispatch(action.login(sessionID));</code> 이런코드를 불러요</p>
<p>응응</p>
<p>저기 있는 login은</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">action/session.js</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> LOG_IN = <span class="string">'LOG_IN'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> LOG_OUT = <span class="string">'LOG_OUT'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; setSession &#125; <span class="keyword">from</span> <span class="string">'../api/base'</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 액션 생산자</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">sessionID</span>) </span>&#123;</div><div class="line">  setSession(sessionID);</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOG_IN, sessionID &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  setSession(<span class="string">''</span>);</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOG_OUT &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; login, logout &#125;;</div></pre></td></tr></table></figure>
<p>여기 있는데</p>
<p>흐음 일단 setSession은 예외이니 그거 말고 login하면 return이</p>
<p><code>return { type: LOG_IN, sessionID };</code></p>
<p>이거죠</p>
<p><strong>Q) <code>dispatch(action.login(sessionID));</code>이 코드에서 session.js를 참조하라고 어디에 나와있어?</strong></p>
<p>action이 <code>import action from &#39;../../actions&#39;</code></p>
<p>이런 코드 위에 있죠 그러면 action/index.js 을 참조하겟죠?</p>
<p>우리 컴포넌트들도 그냥 폴더까지만 참조하게하면 자동으로 index.js 을 참조하니까요</p>
<p>그래서 action/index.js을 보면 얘가 session을 참조해요</p>
<p>… 이게 참조표신가 보네</p>
<p>참조보다는 import가 맞겠죠.</p>
<p>그러면 <code>return { type: LOG_IN, sessionID };</code> 얘가 return 되고</p>
<p>그걸 dispatch가 reducer로 보내요.</p>
<p>그러면 또 reducer/index.js을 보고</p>
<p>지금 type: LOG_IN 이죠</p>
<p><code>type: LOG_IN</code></p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">reducer/session.js</div><div class="line"></div><div class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = initialState, action = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="comment">// focus action is dispatched when a new screen comes into focus</span></div><div class="line">    <span class="keyword">case</span> LOG_IN :</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...state,</div><div class="line">        <span class="attr">sessionID</span>: action.sessionID,</div><div class="line">        <span class="attr">logged</span>: <span class="literal">true</span>,</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> LOG_OUT :</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...state,</div><div class="line">        <span class="attr">sessionID</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">logged</span>: <span class="literal">false</span>,</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>그러면 action.type이 LOG_IN이 코드가 실행이 되고</p>
<p>Q) 아 그럼 index.js안에 사실상 모든 reducer type가 들어가있는거나 마찬가진데 알기 쉽게 나눈거 뿐이구먼</p>
<p>저거 하나하나 import 하면 귀찮아 지니깐 바로 reducer 까지만 import 하도록 한거에요.</p>
<p>action도 마찬가지고요.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">  ...state,</div><div class="line">  <span class="attr">sessionID</span>: action.sessionID,</div><div class="line">  <span class="attr">logged</span>: <span class="literal">true</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>여기서 return값이</p>
<p>새로운 state.session 값으로 바뀌어요</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> initialState = &#123;</div><div class="line">  <span class="attr">sessionID</span>: <span class="string">''</span>,</div><div class="line">  <span class="attr">logged</span>: <span class="literal">false</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>이게 초기치.</p>
<p>그래서 sessionID가 생기고 logged가 true가 되죠.</p>
<p>마찬가지로 reducer/schedule.js 을 보면</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">reducer/schedule.js</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (action.type) &#123;</div><div class="line">   <span class="comment">// focus action is dispatched when a new screen comes into focus</span></div><div class="line">   <span class="keyword">case</span> ADD_SCHEDULE :</div><div class="line">     <span class="keyword">return</span> [...state, action.newScheduleItem];</div><div class="line"></div><div class="line">   <span class="keyword">case</span> EDIT_SCHEDULE :</div><div class="line">     <span class="keyword">return</span> [</div><div class="line">       ...state.slice(<span class="number">0</span>, action.index),</div><div class="line">       action.scheduleItem,</div><div class="line">       ...state.slice(action.index + <span class="number">1</span>),</div><div class="line">     ];</div><div class="line">   <span class="keyword">case</span> DELETE_SCHEDULE :</div><div class="line">     <span class="keyword">return</span> [</div><div class="line">       ...state.slice(<span class="number">0</span>, action.index),</div><div class="line">       ...state.slice(action.index + <span class="number">1</span>),</div><div class="line">     ];</div><div class="line"></div><div class="line">   <span class="keyword">default</span>:</div><div class="line">     <span class="keyword">return</span> state;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>스케쥴 추가면</p>
<p>뒤에 새로운 아이템을 붙이고</p>
<p>edit면 그 아이템만 교체</p>
<p>delete면 그거만 제거</p>
<hr>
<p>아하 알겠어. 매우매우 알기 쉬운 설명이구만!</p>
<p>아 드디어 리덕스의 매커니즘을 이해했어 ㅠㅠ.</p>
<p>데이터변경을 위한 흐름을 파악하면 되는거네.</p>
<p>이런식으로 되어있다보니 아무래도 전에 봤던 그림이 어려워보였던 것 같아.</p>
<p><img src="http://image.slidesharecdn.com/reactreduxintroduction-151124165017-lva1-app6891/95/react-redux-introduction-33-638.jpg?cb=1448383914" alt="Redux flow chart"></p>
<p>the upper picture is from <a href="http://www.slideshare.net/nikgraf/react-redux-introduction" target="_blank" rel="external">http://www.slideshare.net/nikgraf/react-redux-introduction</a></p>
<p>이제는 이 그림도 이해할 수 있게 되었어!</p>
<p>리덕스의 매커니즘</p>
<p>dumbcomponent에서 데이터가변화 =&gt; screen으로 데이터가 감 =&gt; action생성 =&gt; dispather에 의한 redux상의 데이터변화(reducer)</p>
<p>2편에서 게속…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;나의-질문&quot;&gt;&lt;a href=&quot;#나의-질문&quot; class=&quot;headerlink&quot; title=&quot;나의 질문&quot;&gt;&lt;/a&gt;나의 질문&lt;/h2&gt; &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/categories/JavaScript/React-Native/"/>
    
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/tags/React-Native/"/>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/tags/JavaScript/"/>
    
      <category term="Redux" scheme="https://voidsatisfaction.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 121</title>
    <link href="https://voidsatisfaction.github.io/2016/09/27/2016-9-27-a-ProjectEuler/"/>
    <id>https://voidsatisfaction.github.io/2016/09/27/2016-9-27-a-ProjectEuler/</id>
    <published>2016-09-26T16:38:09.000Z</published>
    <updated>2016-09-26T16:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Disc-game-prize-fund"><a href="#Disc-game-prize-fund" class="headerlink" title="Disc game prize fund"></a>Disc game prize fund</h3><h4 id="Problem-121"><a href="#Problem-121" class="headerlink" title="Problem 121"></a>Problem 121</h4><hr>
<p>A bag contains one red disc and one blue disc. In a game of chance a player takes a disc at random and its colour is noted. After each turn the disc is returned to the bag, an extra red disc is added, and another disc is taken at random.</p>
<p>The player pays £1 to play and wins if they have taken more blue discs than red discs at the end of the game.</p>
<p>If the game is played for four turns, the probability of a player winning is exactly 11/120, and so the maximum prize fund the banker should allocate for winning in this game would be £10 before they would expect to incur a loss. Note that any payout will be a whole number of pounds and also includes the original £1 paid to play the game, so in the example given the player actually wins £9.</p>
<p>Find the maximum prize fund that should be allocated to a single game in which fifteen turns are played.</p>
<hr>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li><p>Get the all posibilities player lose(using combination)</p>
</li>
<li><p>Then, get the winning rate of player for this game</p>
</li>
<li><p>Get maximum prize</p>
</li>
</ul>
<figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Problem121</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">find_ans</span></span></div><div class="line">    total_lose = <span class="number">0</span></div><div class="line">    <span class="number">8</span>.upto(<span class="number">15</span>) <span class="keyword">do</span> <span class="params">|lose|</span></div><div class="line">      total_lose += (<span class="number">1</span>..<span class="number">15</span>).to_a.combination(lose).to_a.map&#123; <span class="params">|e|</span> e.reduce(<span class="symbol">:*</span>) &#125;.reduce(<span class="symbol">:+</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    winning_rate = <span class="number">1</span> - Rational(total_lose,factorial(<span class="number">16</span>))</div><div class="line">    prize = (<span class="number">1</span>/winning_rate).floor</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">factorial</span><span class="params">(num)</span></span></div><div class="line">    result = <span class="number">1</span></div><div class="line">    num.downto(<span class="number">1</span>) <span class="keyword">do</span> <span class="params">|i|</span></div><div class="line">      result *= i</div><div class="line">    <span class="keyword">end</span></div><div class="line">    result</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">p Problem121.find_ans</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;h3 id=&quot;Disc-game-prize-fund&quot;&gt;&lt;a href=&quot;#Disc-game-pri
    
    </summary>
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/categories/Ruby/"/>
    
      <category term="Project Euler" scheme="https://voidsatisfaction.github.io/categories/Ruby/Project-Euler/"/>
    
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/tags/Ruby/"/>
    
      <category term="Project Euler" scheme="https://voidsatisfaction.github.io/tags/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title>기여도 1%의 의미</title>
    <link href="https://voidsatisfaction.github.io/2016/09/23/2016-9-23-a-1:100/"/>
    <id>https://voidsatisfaction.github.io/2016/09/23/2016-9-23-a-1:100/</id>
    <published>2016-09-23T11:52:00.000Z</published>
    <updated>2016-09-27T07:53:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20160923_first_commit_git_hub.png" alt="pic1"></p>
<p><strong>드디어 나의 첫 pull request가 반영되었다!</strong></p>
<p><img src="/images/20160923_first_commit2.png" alt="pic2"></p>
<ul>
<li><p>총 코드변동량 : 약 80,000</p>
</li>
<li><p>나의 코드변동량 : 약 800</p>
</li>
<li><p>나의 기여도 : 1%</p>
</li>
</ul>
<h2 id="기여도-1"><a href="#기여도-1" class="headerlink" title="기여도 1%"></a>기여도 1%</h2><p>얼마전에 나는 정말 오랜만에 짜릿한 경험을 했다.</p>
<p>현재 나와 사부님이 같이 진행하는 프로젝트에서 까다로운 여러 테스트(퍼포먼스 리뷰, 코드 리뷰, Eslint)를 잘 극복해서 드디어! 프로젝트를 시작한지 어언 4개월만에 처음으로 Pull Request가 받아들여서 Master에 Merge되는 영광을 누렸다.</p>
<p>약 4개월 전 처음 React Native에 입문했을때 나에게는 너무나도 낯선것들 투성이였다.</p>
<p>가장 먼저, 나는 항상 Ruby만 써왔기 때문에 React Native의 모든것들이 다 낯설었다.</p>
<ul>
<li>state와 props</li>
<li>flex 시스템</li>
<li>상속</li>
<li>flux / redux</li>
<li>xcode simulator</li>
<li>npm</li>
<li>…</li>
</ul>
<p><strong>(redux는 아직도 잘 모르겠다.)</strong></p>
<p>앞서 나열한 모든 개념들이 내게는 낯설었고 도대체 어디서부터 어떻게 공부해야할지 몰랐다.</p>
<p>그리고 너무나도 모르는게 많아서 내가 사부와 같은 위치에서 기술에 대해서 토론하고 코드를 작성할 수 있을거라고는 상상도 못했었다.</p>
<p><strong>그런데 그게 현실로 되었다.</strong></p>
<p>사실 4개월동안 계속 React Native만 공부한 것은 아니었다. 도중에는 회의감이 들어서 당분간 React Native의 코드는 처다도 보지 않았던 때도, 대학원 시험공부에 쫓겨서 한달정도는 전혀 코드를 만지지 않았던 때도 있었다.</p>
<p><strong>그래도 포기 않고 하나하나 사부가 하라는 것을 해나가니 첫 Pull Request까지 성공하게 되었다.</strong></p>
<p>이제 겨우 첫 공헌이고 겨우 기여도 1%에 불과하다고 생각할 수도 있지만, 나에게는 매우 크나큰 의미를 가지고 있는 1%라고 생각한다. 마치 닐 암스트롱이 달에 첫 깃발을 꽂듯이, 콜럼버스가 신 대륙을 발견하듯이, 아리스토텔레스가 욕조속에서 유레카를 외치듯이..</p>
<p>이 1%는 앞으로 내가 개발자 / 엔지니어 / 프로그래밍을 사랑하는 사람으로서 크나큰 1%가 되리라 확신한다.</p>
<p>왜냐하면 나는 내 1%를 정말 자랑스럽게 생각하기 때문이다.</p>
<p>이 글을 보는 다른 사람들과 미래의 나에게 지금 이 행복한 기분을 전달하고자 이 글을 쓴다.</p>
<p><strong>나의 위대한 1%를 기리며</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/20160923_first_commit_git_hub.png&quot; alt=&quot;pic1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;드디어 나의 첫 pull request가 반영되었다!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/
    
    </summary>
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/categories/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/tags/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/tags/React-Native/"/>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Xcode버전업과 RN개발환경 오류들</title>
    <link href="https://voidsatisfaction.github.io/2016/09/19/2016-9-19-a-rnerrors/"/>
    <id>https://voidsatisfaction.github.io/2016/09/19/2016-9-19-a-rnerrors/</id>
    <published>2016-09-19T02:52:00.000Z</published>
    <updated>2016-09-26T15:47:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>이 글을 쓰게 되는 계기는 다름이 아니라 몇가지 에러로 인하여 나와 사부가 정말 말 그대로 <strong>하루종일</strong> 고생했다는 점이다.</p>
<p>그래서 앞으로 이러한 에러가 나올 경우에 잘 대처할 수 있도록 머리에 담아두고자 이곳에 글을 쓴다.</p>
<h2 id="발단-Git사용의-미숙함-Xcode업데이트"><a href="#발단-Git사용의-미숙함-Xcode업데이트" class="headerlink" title="발단 : Git사용의 미숙함 + Xcode업데이트"></a>발단 : Git사용의 미숙함 + Xcode업데이트</h2><p>Remote에서 git pull을 한 이후로 이상하게 simulator가 실행되지 않는 버그가 발생했다. 그리고, 나는 그것이 Xcode가 업데이트되지 않았기 때문에 발생한 문제라고 생각했다.</p>
<p>그래서 나는, 끔찍한 미래가 기다리는 것도 모른채</p>
<p>RN노드 모듈을 전부 삭제하고 다시 깔고, cache도 전부 지웠다 다시 깔았으며, xcode마저 업데이트 했다.</p>
<h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>해결은 다음과 같은 순서로 행해졌다.</p>
<h3 id="1-xcode업데이트에-의한-websocket오류-gt-RCTWebSocket의-Custom-Compiler-Flag의-value-제거"><a href="#1-xcode업데이트에-의한-websocket오류-gt-RCTWebSocket의-Custom-Compiler-Flag의-value-제거" class="headerlink" title="1. xcode업데이트에 의한 websocket오류 =&gt; RCTWebSocket의 Custom Compiler Flag의 value 제거"></a>1. xcode업데이트에 의한 websocket오류 =&gt; RCTWebSocket의 Custom Compiler Flag의 value 제거</h3><p><img src="/images/20160919_websocket_error.png" alt="error1"></p>
<h3 id="2-terminal상에서-무엇이-에러인지-모를때-gt-xcode에서-build후-error를-추출한다"><a href="#2-terminal상에서-무엇이-에러인지-모를때-gt-xcode에서-build후-error를-추출한다" class="headerlink" title="2. terminal상에서 무엇이 에러인지 모를때 =&gt; xcode에서 build후 error를 추출한다."></a>2. terminal상에서 무엇이 에러인지 모를때 =&gt; xcode에서 build후 error를 추출한다.</h3><h3 id="3-xcode를-build할때-gt-흰색으로-열어라"><a href="#3-xcode를-build할때-gt-흰색으로-열어라" class="headerlink" title="3. xcode를 build할때 =&gt; 흰색으로 열어라"></a>3. xcode를 build할때 =&gt; 흰색으로 열어라</h3><h3 id="4-linker-library지원-7-0버전-설정을-로컬에-맞는-9-1로-변환"><a href="#4-linker-library지원-7-0버전-설정을-로컬에-맞는-9-1로-변환" class="headerlink" title="4. linker library지원 (7.0버전 설정을 로컬에 맞는 9.1로 변환)"></a>4. linker library지원 (7.0버전 설정을 로컬에 맞는 9.1로 변환)</h3><p><img src="/images/20160919_linker_error.png" alt="error2"></p>
<h3 id="5-suitable-library-오류-gt-시뮬레이터를-ios10-에서-ios9로-실행을-바꿈-없으면-새로-다운받아야함"><a href="#5-suitable-library-오류-gt-시뮬레이터를-ios10-에서-ios9로-실행을-바꿈-없으면-새로-다운받아야함" class="headerlink" title="5. suitable library 오류 =&gt; 시뮬레이터를 ios10 에서 ios9로 실행을 바꿈(없으면 새로 다운받아야함)"></a>5. suitable library 오류 =&gt; 시뮬레이터를 ios10 에서 ios9로 실행을 바꿈(없으면 새로 다운받아야함)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">dyld: Library not loaded: @rpath/libFirestack.a</div><div class="line">  Referenced from: /Users/tech-camp-064/Library/Developer/CoreSimulator/Devices/3692613C-5EBB-4BAD-9496-C336B2629BC8/data/Containers/Bundle/Application/D73B751F-39B9-4230-818A-C7C5BF5B7C66/SchoolShare.app/SchoolShare</div><div class="line">  Reason: no suitable image found.  </div><div class="line"></div><div class="line">  Did find:</div><div class="line">    /Users/tech-camp-064/Library/Developer/Xcode/DerivedData/SchoolShare-dlacbtwbdazihdgkeyjricajfoer/Build/Products/Debug-iphonesimulator/libFirestack.a: required code signature missing for &apos;/Users/tech-camp-064/Library/Developer/Xcode/DerivedData/SchoolShare-dlacbtwbdazihdgkeyjricajfoer/Build/Products/Debug-iphonesimulator/libFirestack.a&apos;</div><div class="line"></div><div class="line">(lldb)</div></pre></td></tr></table></figure>
<p><img src="/images/20160919_simulator_error.png" alt="error3"></p>
<h3 id="6-무슨-이유인지-모르겠지만-npm-install을-해도-존재하지-않다고-하면-그것은-수동으로-npm-i-해줘야-한다"><a href="#6-무슨-이유인지-모르겠지만-npm-install을-해도-존재하지-않다고-하면-그것은-수동으로-npm-i-해줘야-한다" class="headerlink" title="6. 무슨 이유인지 모르겠지만 npm install을 해도 존재하지 않다고 하면 그것은 수동으로 npm i 해줘야 한다"></a>6. 무슨 이유인지 모르겠지만 npm install을 해도 존재하지 않다고 하면 그것은 수동으로 npm i 해줘야 한다</h3><p><img src="/images/20160919_module_error2.png" alt="error4"></p>
<p>이와같은 방식으로 해결했다.</p>
<h2 id="교훈"><a href="#교훈" class="headerlink" title="교훈"></a>교훈</h2><ul>
<li><p>xcode업데이트는 팀원과 협의하에 행해야 한다.</p>
</li>
<li><p>terminal상에서 error의 내용을 잘 확인할 수 없을때에는 xcode에서 build하면 단서를 얻을 수 있다.</p>
</li>
<li><p>xcode를 틈틈이 공부할 수 있으면 참 좋을것 같다.</p>
</li>
</ul>
<p>그래도 오늘도 굴복하지 말고 Happy Coding!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이 글을 쓰게 되는 계기는 다름이 아니라 몇가지 에러로 인하여 나와 사부가 정말 말 그대로 &lt;strong&gt;하루종일&lt;/strong&gt; 고생했다는 점이다.&lt;/p&gt;
&lt;p&gt;그래서 앞으로 이러한 에러가 나올 경우에 잘 대처할 수 있도록 머리에 담아두고자 이
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/categories/JavaScript/React-Native/"/>
    
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/tags/React-Native/"/>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>오늘 또 느낀 것들...</title>
    <link href="https://voidsatisfaction.github.io/2016/09/09/2016-9-09-a-gitandmygit/"/>
    <id>https://voidsatisfaction.github.io/2016/09/09/2016-9-09-a-gitandmygit/</id>
    <published>2016-09-09T02:52:00.000Z</published>
    <updated>2016-09-26T15:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="최근에-했던-것"><a href="#최근에-했던-것" class="headerlink" title="최근에 했던 것"></a>최근에 했던 것</h2><p>오늘은 그동안 내가 작업했던 일을 갈무리 짓는 날이었다.</p>
<p>솔직히 얘기하자면 하는 일이 그렇게 엄청 대단한 것은 아니고, React Native의 Component 들을 Atomic Design에 맞게 리팩토링 하는 일을 했다.</p>
<p>애초에 나 자신이 작성한 코드가 아니었기때문에 코드를 분석하는 것 부터가 일이었으며, 분석한 뒤에도 모르는 것 투성이었다.</p>
<p>그래도 일단은 Atomic Design에 관한 글과, 사부의 설명을 들으면서 하나하나 정리해 나가기 시작했다.</p>
<p>그랬더니 처음에는 엄청나게 막연하게 ‘너무 힘들 것 같다’라고 생각되었던 일들이 생각보다 ‘할만 하구나’라는 생각이 들었다.</p>
<p>내가 했던 일을 잠깐 설명해보자면 AddNewLecture이라는 하나의 Screen을 Organisms, Molecules, Atoms까지 분해하여서 Module화 시키는 것이었다. 그리고 이렇게 모듈화를 시키므로써, 어플리케이션의 구조를 중복을 제거함과 동시에 재활용가능하게 하는 것이었다. 또한, Proptypes를 이용하여 보다 엄밀하게 기능을 제어할 수 있도록 했다.</p>
<p>그리고 그 과정은</p>
<ol>
<li><p>Screen을 복사</p>
</li>
<li><p>분해</p>
</li>
<li><p>합성</p>
</li>
</ol>
<p>이렇게 처리하였다.</p>
<h2 id="또-다시-높은-산"><a href="#또-다시-높은-산" class="headerlink" title="또 다시 높은 산"></a>또 다시 높은 산</h2><p>이렇게 전부 코드를 처리하고 난 다음 나의 기분은 정말 뿌듯했다.</p>
<p>‘이제는 나도 일인분은 할 수 있겠구나’라고 생각했다.</p>
<p>그러나 처리한 일을 기존의 일과 병합하는 과정에서 큰 난관에 봉착했다.</p>
<p>원래 내가 작업하고있던 파일들은 local환경에서 새로운 branch를 만들어서 작업중이었다.</p>
<ol>
<li><p>나는 그것을 <strong>한차례 수정이된</strong> remote환경의 master의 내용을 내 local환경의 master branch에 적용한 뒤</p>
</li>
<li><p>다시 그 내용을 local의 새 브랜치에 merge하고</p>
</li>
<li><p>그 내용을 다시 remote에 push해서</p>
</li>
<li><p>pull request에 관한 내용을 작성</p>
</li>
</ol>
<p>해야만했는데, 2에서 merge하는 과정에 내가 무엇인가를 잘못헀는지 엄청나게 많은 오류가 뜨면서 많은 파일들이 수정되어버렸다.</p>
<p>아차차 싶어서 사부에게 결과를 말한 뒤, 사부의 제안에 따라서 SourceTree라는 프로그램을 다운로드 받아서 다시 commit직후의 상태로 되돌릴 수 있었다.</p>
<p>그러나</p>
<ul>
<li><p>npm install이후 npm test에서 eslint에 관한 수많은 error들</p>
</li>
<li><p>pull request를 작성한 것들에 대한 사부의 신랄한 코멘트</p>
</li>
<li><p>“앞으로는 그냥 commandline git대신 SourceTree로 하세요.”</p>
</li>
</ul>
<p>를 보면서 약간 자존심에 금이갔다.</p>
<p>그래도 난 나름대로 잘 했다고 생각했는데, 나의 욕심으로 정상만을 바라보다 그만 눈 앞의 돌에 고꾸라 넘어져버렸다.</p>
<h2 id="그래도-그냥-천천히-올라야지"><a href="#그래도-그냥-천천히-올라야지" class="headerlink" title="그래도 그냥, 천천히, 올라야지"></a>그래도 그냥, 천천히, 올라야지</h2><p>그래도 나는 산을 오르는것을 힘들어할 망정 포기하지는 않을 것이다.</p>
<p>내가 갖고 있는 나만의 장점 중 하나는, ‘위기를 기회로 바꾸는 마음가짐’에 있다고 생각한다.</p>
<p>내 앞에 크나큰 산들이 가로막고, 그 산들이 얼마나 더 많이 있는지 모르지만 나는 이 위기를 기회로 바꾸어서 내가 한결 나아갈 수 있도록 해야겠다.</p>
<p><strong>이렇게 한 번 넘어졌을때야 말로 바로 내가 가장 나 다워질 수 있는 시기이자, 내게는 기회다.</strong></p>
<p>그래 지금 산을 오르는 과정에서 한 번 넘어졌어도, 그래도 그냥, 천천히, 올라야지.</p>
<h2 id="앞으로-해야-할-Task"><a href="#앞으로-해야-할-Task" class="headerlink" title="앞으로 해야 할 Task"></a>앞으로 해야 할 Task</h2><ul>
<li><p><strong>ESlint Error처리 + github feedback =&gt; npm test =&gt; remote push =&gt; merge</strong></p>
</li>
<li><p><a href="http://learngitbranching.js.org/" target="_blank" rel="external">Git / Github</a> 이해될 때 까지 해보자. 한 번 누가 이기나 해보자.</p>
</li>
<li><p>SourceTree</p>
</li>
<li><p>npm test에 대하여</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;최근에-했던-것&quot;&gt;&lt;a href=&quot;#최근에-했던-것&quot; class=&quot;headerlink&quot; title=&quot;최근에 했던 것&quot;&gt;&lt;/a&gt;최근에 했던 것&lt;/h2&gt;&lt;p&gt;오늘은 그동안 내가 작업했던 일을 갈무리 짓는 날이었다.&lt;/p&gt;
&lt;p&gt;솔직히 얘기하
    
    </summary>
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/categories/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/tags/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 공부기 4 ~ Session &amp; Password &amp; Socket.io</title>
    <link href="https://voidsatisfaction.github.io/2016/09/03/2016-9-03-b-securitysocketio/"/>
    <id>https://voidsatisfaction.github.io/2016/09/03/2016-9-03-b-securitysocketio/</id>
    <published>2016-09-03T02:52:00.000Z</published>
    <updated>2016-09-26T15:46:18.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>layout: post</p>
<h2 id="title-Nodejs-공부기4-Session-amp-Password-amp-Socket-io"><a href="#title-Nodejs-공부기4-Session-amp-Password-amp-Socket-io" class="headerlink" title="title: Nodejs 공부기4 ~ Session &amp; Password &amp; Socket.io"></a>title: Nodejs 공부기4 ~ Session &amp; Password &amp; Socket.io</h2><h2 id="포인트"><a href="#포인트" class="headerlink" title="포인트"></a>포인트</h2><ul>
<li><p>Session</p>
<ul>
<li>Client에 저장하는 것은 sessionid뿐. 실질적인 데이터는 서버에.</li>
</ul>
</li>
<li><p>Password</p>
<ul>
<li>md5 + salt(global, respective)</li>
<li>sha512 + salt</li>
<li>PBKDF2</li>
</ul>
</li>
<li><p>Socket.io</p>
<ul>
<li><del>정의는아직</del></li>
<li>실시간 어플리케이션(채팅, 캐치마인드)</li>
</ul>
</li>
</ul>
<h2 id="Real-code"><a href="#Real-code" class="headerlink" title="Real code"></a>Real code</h2><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</div><div class="line"><span class="keyword">const</span> FileStore = <span class="built_in">require</span>(<span class="string">'session-file-store'</span>)(session)</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</div><div class="line"><span class="keyword">const</span> pug = <span class="built_in">require</span>(<span class="string">'pug'</span>)</div><div class="line"><span class="keyword">const</span> app = express()</div><div class="line"></div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>)</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'pug'</span>)</div><div class="line"></div><div class="line">app.use(session(&#123;</div><div class="line">  <span class="attr">store</span>: <span class="keyword">new</span> FileStore(),</div><div class="line">  <span class="attr">secret</span>: <span class="string">'wefjwoefkwlefmwlkm'</span>,</div><div class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</div><div class="line">&#125;))</div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</div><div class="line"></div><div class="line"><span class="comment">// this scope!</span></div><div class="line"><span class="keyword">const</span> userDB = &#123;</div><div class="line">  <span class="attr">findUser</span>: <span class="function"><span class="keyword">function</span>(<span class="params">id,password</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.allUsers[id] || <span class="keyword">this</span>.allUsers[id][<span class="string">'password'</span>] != password) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">allUsers</span>: &#123;</div><div class="line">    <span class="attr">admin</span>: &#123;</div><div class="line">      <span class="attr">password</span>: <span class="string">'123'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">nersery</span>: &#123;</div><div class="line">      <span class="attr">password</span>: <span class="string">'123123'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">lionking</span>: &#123;</div><div class="line">      <span class="attr">password</span>: <span class="string">'123'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// req.session.count</span></div><div class="line">app.get(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (req.session.userInfo) &#123;</div><div class="line">    res.redirect(<span class="string">'/welcome'</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    errorMessage = req.session.err</div><div class="line">    res.render(<span class="string">'login'</span>,&#123;<span class="attr">errorMessage</span>: errorMessage&#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">app.post(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> userId = req.body.userId</div><div class="line">  <span class="keyword">const</span> userPassword = req.body.userPassword</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (userDB.findUser(userId,userPassword)) &#123;</div><div class="line">    <span class="keyword">delete</span> req.session.err</div><div class="line">    req.session.userInfo = &#123;</div><div class="line">      <span class="attr">id</span>: userId</div><div class="line">    &#125;</div><div class="line">    res.redirect(<span class="string">'/welcome'</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    req.session.err = <span class="string">'Check your id or password'</span></div><div class="line">    res.redirect(<span class="string">'/login'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/logout'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">delete</span> req.session.errorMessage</div><div class="line">  <span class="keyword">delete</span> req.session.userInfo</div><div class="line">  res.redirect(<span class="string">'/login'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/register'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (req.session.userInfo) &#123;</div><div class="line">    res.redirect(<span class="string">'/welcome'</span>)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.session.errorMessage)&#123;</div><div class="line">    res.render(<span class="string">'register'</span>,&#123;<span class="attr">errorMessage</span>: req.session.errorMessage&#125;)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.render(<span class="string">'register'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">app.post(<span class="string">'/register'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> userId = req.body.userId</div><div class="line">  <span class="keyword">const</span> userPassword = req.body.userPassword</div><div class="line">  <span class="keyword">const</span> userPasswordConfirm = req.body.userPasswordConfirm</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (userDB.allUsers[userId]) &#123;</div><div class="line">    req.session.errorMessage = <span class="string">'the id is already exist'</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(userPassword.length &lt; <span class="number">3</span>)&#123;</div><div class="line">    req.session.errorMessage = <span class="string">'your password should be more than 3 characters'</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(userPassword !== userPasswordConfirm)&#123;</div><div class="line">    req.session.errorMessage = <span class="string">'Password is not correct with Password confirm'</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">delete</span> req.session.errorMessage</div><div class="line">    userDB.allUsers[userId] = &#123; <span class="attr">password</span>: userPassword&#125;</div><div class="line">    req.session.userInfo = &#123;<span class="attr">id</span>: userId&#125;</div><div class="line">    req.session.save(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      res.redirect(<span class="string">'/welcome'</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  res.redirect(<span class="string">'/register'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/welcome'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> userId = req.session.userInfo.id</div><div class="line"></div><div class="line">  res.render(<span class="string">'welcome'</span>, &#123;<span class="attr">userId</span>: userId&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Connected at 3000 port!'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Socket-io"><a href="#Socket-io" class="headerlink" title="Socket.io"></a>Socket.io</h3><h4 id="js-part"><a href="#js-part" class="headerlink" title="js part"></a>js part</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)()</div><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app)</div><div class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http)</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.sendFile(__dirname + <span class="string">'/views/index.html'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">io.on(<span class="string">'connection'</span>, (socket) =&gt; &#123;</div><div class="line">  socket.on(<span class="string">'chat message'</span>, (msg) =&gt; &#123;</div><div class="line">    io.emit(<span class="string">'chat message'</span>, msg)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">http.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Connected at 3000 port!'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="html-part"><a href="#html-part" class="headerlink" title="html part"></a>html part</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.IO chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">      * &#123; margin: 0; padding: 0; box-sizing: border-box; &#125;</div><div class="line">      body &#123; font: 13px Helvetica, Arial; &#125;</div><div class="line">      form &#123; background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; &#125;</div><div class="line">      form input &#123; border: 0; padding: 10px; width: 90%; margin-right: .5%; &#125;</div><div class="line">      form button &#123; width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; &#125;</div><div class="line">      #messages &#123; list-style-type: none; margin: 0; padding: 0; &#125;</div><div class="line">      #messages li &#123; padding: 5px 10px; &#125;</div><div class="line">      #messages li:nth-child(odd) &#123; background: #eee; &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"m"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="keyword">const</span> socket = io()</div><div class="line">      $(<span class="string">'form'</span>).submit( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        socket.emit(<span class="string">'chat message'</span>, $(<span class="string">'#m'</span>).val())</div><div class="line">        $(<span class="string">'#m'</span>).val(<span class="string">''</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">      &#125;)</div><div class="line">      socket.on(<span class="string">'chat message'</span>, (msg) =&gt; &#123;</div><div class="line">        $(<span class="string">'#messages'</span>).append($(<span class="string">'&lt;li&gt;'</span>).text(msg))</div><div class="line">      &#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://opentutorials.org/course/2136/12132" target="_blank" rel="external">생활코딩 Password 보안</a></li>
<li><a href="http://socket.io/get-started/chat/" target="_blank" rel="external">Socket.io Getting Started</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;layout: post&lt;/p&gt;
&lt;h2 id=&quot;title-Nodejs-공부기4-Session-amp-Password-amp-Socket-io&quot;&gt;&lt;a href=&quot;#title-Nodejs-공부기4-Session-amp-Password-amp-
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="Nodejs" scheme="https://voidsatisfaction.github.io/categories/JavaScript/Nodejs/"/>
    
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/tags/JavaScript/"/>
    
      <category term="Socket.io" scheme="https://voidsatisfaction.github.io/tags/Socket-io/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 공부기 ~ this, bind, apply</title>
    <link href="https://voidsatisfaction.github.io/2016/09/02/2016-9-02-a-thisapply/"/>
    <id>https://voidsatisfaction.github.io/2016/09/02/2016-9-02-a-thisapply/</id>
    <published>2016-09-02T02:52:00.000Z</published>
    <updated>2016-09-26T16:05:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="포인트"><a href="#포인트" class="headerlink" title="포인트"></a>포인트</h2><ul>
<li><p>This의 사용</p>
<ul>
<li>객체의 소속인 메소드의 this는 그 객체를 가르킨다.</li>
<li>아무것도 없을 경우는 window객체</li>
</ul>
</li>
<li><p>Bind</p>
<ul>
<li><strong>bind는 어떤 객체에 종속되어 있는 함수의 this의 문맥을 명시적으로 변경시키기 위해서 사용한다.</strong></li>
</ul>
</li>
<li><p>Apply</p>
<ul>
<li><strong>apply는 일시적으로 어떠한 함수를 다른 객체에서 사용할 수 있도록 하기 위해서 사용한다.</strong></li>
</ul>
</li>
</ul>
<h2 id="Real-code"><a href="#Real-code" class="headerlink" title="Real code"></a>Real code</h2><h3 id="This-예제"><a href="#This-예제" class="headerlink" title="This 예제"></a>This 예제</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> userDB = &#123;</div><div class="line">  <span class="attr">findUser</span>: <span class="function"><span class="keyword">function</span>(<span class="params">id,password</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.allUsers[id] || <span class="keyword">this</span>.allUsers[id][<span class="string">'password'</span>] != password) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">allUsers</span>: &#123;</div><div class="line">    <span class="attr">admin</span>: &#123;</div><div class="line">      <span class="attr">password</span>: <span class="string">'123'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">nersery</span>: &#123;</div><div class="line">      <span class="attr">password</span>: <span class="string">'123123'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">lionking</span>: &#123;</div><div class="line">      <span class="attr">password</span>: <span class="string">'123'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="Bind예제"><a href="#Bind예제" class="headerlink" title="Bind예제"></a>Bind예제</h3><p><a href="https://voidsatisfaction.github.io/b-rn/">React Native 공부기1 ~ bind 편 참조</a></p>
<h3 id="Apply예제"><a href="#Apply예제" class="headerlink" title="Apply예제"></a>Apply예제</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;</div><div class="line"><span class="keyword">var</span> p = &#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span>(<span class="keyword">this</span>)&#123;</div><div class="line">        <span class="keyword">case</span> o:</div><div class="line">            <span class="built_in">document</span>.write(<span class="string">'o&lt;br /&gt;'</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> p:</div><div class="line">            <span class="built_in">document</span>.write(<span class="string">'p&lt;br /&gt;'</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">window</span>:</div><div class="line">            <span class="built_in">document</span>.write(<span class="string">'window&lt;br /&gt;'</span>);</div><div class="line">            <span class="keyword">break</span>;          </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">func();</div><div class="line">func.apply(o);</div><div class="line">func.apply(p);</div></pre></td></tr></table></figure>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://opentutorials.org/course/743/6571" target="_blank" rel="external">생활코딩 this</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;포인트&quot;&gt;&lt;a href=&quot;#포인트&quot; class=&quot;headerlink&quot; title=&quot;포인트&quot;&gt;&lt;/a&gt;포인트&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This의 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체의 소속인 메소드의 this는 그 객체를 가르킨다.&lt;/li&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="ECMA Script6" scheme="https://voidsatisfaction.github.io/categories/JavaScript/ECMA-Script6/"/>
    
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/tags/JavaScript/"/>
    
      <category term="Grammar" scheme="https://voidsatisfaction.github.io/tags/Grammar/"/>
    
  </entry>
  
  <entry>
    <title>Give It Five Minutes</title>
    <link href="https://voidsatisfaction.github.io/2016/08/26/2016-8-26-a-giveItFiveMinutes/"/>
    <id>https://voidsatisfaction.github.io/2016/08/26/2016-8-26-a-giveItFiveMinutes/</id>
    <published>2016-08-26T02:52:00.000Z</published>
    <updated>2016-09-26T15:44:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><p><strong><a href="https://m.signalvnoise.com/give-it-five-minutes-b8115d6f2361#.vy96oh8hp" target="_blank" rel="external">Give It Five Minutes</a></strong></p>
<p><strong>내가 읽은 2016최고의 글이다. 언제나 마음속에 내 철학으로 새겨둬야지.</strong></p>
<p>이곳에 올린 이유는, 계속 마음에 품기 위해서.</p>
<p>그리고 이렇게 좋고 멋있는 글이 사라질까 두려워서.</p>
<h3 id="Give-it-five-minutes"><a href="#Give-it-five-minutes" class="headerlink" title="Give it five minutes"></a>Give it five minutes</h3><p>I used to be a hothead. Whenever anyone said anything, I’d think of a way to disagree. I’d push back hard if something didn’t fit my world-view.</p>
<p>It’s like I had to be first with an opinion — as if being first meant something. But what it really meant was that I wasn’t thinking hard enough about the problem. The faster you react, the less you think. Not always, but often.</p>
<p>It’s easy to talk about knee jerk reactions as if they are things that only other people have. You have them too. If your neighbor isn’t immune, neither are you.</p>
<p>This came to a head back in 2007. I was speaking at the Business Innovation Factory conference in Providence, RI. So was Richard Saul Wurman. After my talk Richard came up to introduce himself and compliment my talk. That was very generous of him. He certainly didn’t have to do that.</p>
<p>And what did I do? I pushed back at him about the talk he gave. While he was making his points on stage, I was taking an inventory of the things I didn’t agree with. And when presented with an opportunity to speak with him, I quickly pushed back at some of his ideas. I must have seemed like such an asshole.</p>
<p>His response changed my life. It was a simple thing. He said “Man, give it five minutes.” I asked him what he meant by that? He said, it’s fine to disagree, it’s fine to push back, it’s great to have strong opinions and beliefs, but give my ideas some time to set in before you’re sure you want to argue against them. “Five minutes” represented “think”, not react. He was totally right. I came into the discussion looking to prove something, not learn something.</p>
<p>This was a big moment for me.</p>
<p>Richard has spent his career thinking about these problems. He’s given it 30 years. And I gave it just a few minutes. Now, certainly he can be wrong and I could be right, but it’s better to think deeply about something first before being so certain you’re right.</p>
<p>There’s also a difference between asking questions and pushing back. Pushing back means you already think you know. Asking questions means you want to know. Ask more questions.</p>
<p>Learning to think first rather than react quick is a life long pursuit. It’s tough. I still get hot sometimes when I shouldn’t. But I’m really enjoying all the benefits of getting better.</p>
<p>If you aren’t sure why this is important, think about this quote from Jonathan Ive regarding Steve Jobs’ reverence for ideas:</p>
<blockquote>
<p>And just as Steve loved ideas, and loved making stuff, he treated the process of creativity with a rare and a wonderful reverence. You see, I think he better than anyone understood that while ideas ultimately can be so powerful, they begin as fragile, barely formed thoughts, so easily missed, so easily compromised, so easily just squished.</p>
</blockquote>
<p>That’s deep. Ideas are fragile. They often start powerless. They’re barely there, so easy to ignore or skip or miss.</p>
<p><strong>There are two things in this world that take no skill: 1. Spending other people’s money and 2. Dismissing an idea.</strong></p>
<p>Dismissing an idea is so easy because it doesn’t involve any work. You can scoff at it. You can ignore it. You can puff some smoke at it. That’s easy. The hard thing to do is protect it, think about it, let it marinate, explore it, riff on it, and try it. The right idea could start out life as the wrong idea.</p>
<p>So next time you hear something, or someone, talk about an idea, pitch an idea, or suggest an idea, give it five minutes. Think about it a little bit before pushing back, before saying it’s too hard or it’s too much work. Those things may be true, but there may be another truth in there too: It may be worth it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://m.signalvnoise.com/give-it-five-minutes-b8115
    
    </summary>
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/categories/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/tags/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>Callback / Clojure / Continuation</title>
    <link href="https://voidsatisfaction.github.io/2016/08/25/2016-8-25-a-cbcjcn/"/>
    <id>https://voidsatisfaction.github.io/2016/08/25/2016-8-25-a-cbcjcn/</id>
    <published>2016-08-25T02:52:00.000Z</published>
    <updated>2016-09-26T16:04:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="배경"><a href="#배경" class="headerlink" title="배경"></a>배경</h2><p>콜백과 클로저는 JavaScript를 배우거나 OpenGL에서 본 개념이다.<br>계속은 The Little Schemer에서 본 개념인데 너무 헷갈려서 정리해 놓는다.</p>
<p><strong>계속 때문에 머리가 터질 것 같다</strong></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><p><a href="http://www.stdio.h.kyoto-u.ac.jp/~hioki/prog_is_I/SchemeNotes/continuation.html" target="_blank" rel="external">히오키 선생님의 스킴(일문) 継続</a></p>
</li>
<li><p><a href="http://programmingsummaries.tistory.com/92" target="_blank" rel="external">JavaScript정리 리터럴부터 클로저까지</a></p>
</li>
<li><p>나무위키</p>
</li>
</ul>
<h2 id="포인트"><a href="#포인트" class="headerlink" title="포인트"></a>포인트</h2><ul>
<li><p>콜백</p>
<ul>
<li>함수에 인자로 넘겨지는 함수</li>
<li>함수에 인자로 넘겨지므로써 그 함수에 따른 기능을 하도록 한다.</li>
<li>ex) Nodejs에서 req res에서의 콜백, OpenGL에서의 keyfuc콜백</li>
</ul>
</li>
<li><p>클로저</p>
<ul>
<li>클로저는 함수가 선언될 당시의 환경을 기억했다가 나중에 호출되었을때 원래의 환경에 따라 수행되는 함수이다.</li>
</ul>
</li>
<li><p>계속</p>
<ul>
<li>actor(lamda function)가 값과 처리방식을 다음 actor에 넘겨준다.</li>
<li>다음 actor은 값을 다른 actor에 넘겨주거나 처리하거나 할 수 있다.</li>
</ul>
</li>
</ul>
<h2 id="콜백"><a href="#콜백" class="headerlink" title="콜백"></a>콜백</h2><h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//메인 프로그램</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainProgram</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> arg;</div><div class="line">	LibFunc(arg, CallbackFunc);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//콜백 함수</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CallbackFunc</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">	<span class="comment">//result 이용</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//라이브러리 함수</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LibFunc</span>(<span class="params">arg, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> data; <span class="comment">// 작업수행</span></div><div class="line">	callback(data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="클로저"><a href="#클로저" class="headerlink" title="클로저"></a>클로저</h2><h3 id="예시-1"><a href="#예시-1" class="headerlink" title="예시"></a>예시</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x=<span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> ++x; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> x=<span class="number">-1</span>;</div><div class="line"><span class="keyword">var</span> f= outer();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// -1</span></div><div class="line"><span class="built_in">console</span>.log(f()); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(f()); <span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(f()); <span class="comment">//3</span></div></pre></td></tr></table></figure>
<h3 id="예시2-초기화"><a href="#예시2-초기화" class="headerlink" title="예시2 : 초기화"></a>예시2 : 초기화</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x=<span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> ++x; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> x=<span class="number">-1</span>;</div><div class="line">outer(); <span class="comment">//function()&#123; return ++x; &#125;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// -1</span></div><div class="line"><span class="built_in">console</span>.log(outer()()); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(outer()()); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(outer()()); <span class="comment">//1</span></div></pre></td></tr></table></figure>
<h3 id="예시3-클로저-인스턴스"><a href="#예시3-클로저-인스턴스" class="headerlink" title="예시3 : 클로저 인스턴스"></a>예시3 : 클로저 인스턴스</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x=<span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> ++x; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> x=<span class="number">-1</span>;</div><div class="line"><span class="keyword">var</span> f= outer(); <span class="comment">//인스턴스 하나를 선언하는 효과다!!</span></div><div class="line"><span class="keyword">var</span> g= outer(); <span class="comment">//이렇게 하면 별도의 인스턴스로 생성된다.</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// -1</span></div><div class="line"><span class="built_in">console</span>.log(f()); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(f()); <span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(f()); <span class="comment">//3</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(g()); <span class="comment">//1 //새롭게 1부터 시작하는 것을 볼 수 있다.</span></div><div class="line"><span class="built_in">console</span>.log(g()); <span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(g()); <span class="comment">//3</span></div></pre></td></tr></table></figure>
<p><strong>클로저는 비공개 내부 변수를 갖는 함수 인스턴스 생성자이다.</strong></p>
<p><strong>클로저로 생성한 독립된 변수 공간을 가진 인스턴스를 <em>클로저 인스턴스</em>라고 한다.</strong></p>
<p><strong>Q) 근데 결국 클로저를 어따가 쓰는거지?</strong></p>
<h2 id="계속"><a href="#계속" class="headerlink" title="계속"></a>계속</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(define fact (lambda n c)</div><div class="line">		(if (= n c 1 )</div><div class="line">			(fact (- n 1)</div><div class="line">				(lambda (a) (c (* n a)))))))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;배경&quot;&gt;&lt;a href=&quot;#배경&quot; class=&quot;headerlink&quot; title=&quot;배경&quot;&gt;&lt;/a&gt;배경&lt;/h2&gt;&lt;p&gt;콜백과 클로저는 JavaScript를 배우거나 OpenGL에서 본 개념이다.&lt;br&gt;계속은 The Little Schemer에서
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="ECMA Script6" scheme="https://voidsatisfaction.github.io/categories/JavaScript/ECMA-Script6/"/>
    
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍 공부에 도움이 되는 사이트</title>
    <link href="https://voidsatisfaction.github.io/2016/08/25/3018-8-18-c-ProgrammingSite/"/>
    <id>https://voidsatisfaction.github.io/2016/08/25/3018-8-18-c-ProgrammingSite/</id>
    <published>2016-08-25T02:52:00.000Z</published>
    <updated>2016-09-26T15:49:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>프로그래밍(주로 웹) 공부에 도움이 되는 사이트를 모아보았습니다.</p>
<h1 id="웹-기초"><a href="#웹-기초" class="headerlink" title="웹 기초"></a>웹 기초</h1><p>웹의 기초적인 부분을 배울 수 있는 사이트들 입니다.</p>
<h3 id="생활코딩"><a href="#생활코딩" class="headerlink" title="생활코딩"></a><a href="https://opentutorials.org/course/1" target="_blank" rel="external">생활코딩</a></h3><h3 id="Codelion"><a href="#Codelion" class="headerlink" title="Codelion"></a><a href="http://codelion.net/" target="_blank" rel="external">Codelion</a></h3><h3 id="멋쟁이-사자처럼"><a href="#멋쟁이-사자처럼" class="headerlink" title="멋쟁이 사자처럼"></a><a href="http://www.likelion.net/" target="_blank" rel="external">멋쟁이 사자처럼</a></h3><h3 id="Codecademy"><a href="#Codecademy" class="headerlink" title="Codecademy"></a><a href="https://www.codecademy.com/" target="_blank" rel="external">Codecademy</a></h3><h3 id="Css-레이아웃을-배웁시다"><a href="#Css-레이아웃을-배웁시다" class="headerlink" title="Css 레이아웃을 배웁시다"></a><a href="http://ko.learnlayout.com/" target="_blank" rel="external">Css 레이아웃을 배웁시다</a></h3><h1 id="웹-기본"><a href="#웹-기본" class="headerlink" title="웹 기본"></a>웹 기본</h1><h3 id="Node-School"><a href="#Node-School" class="headerlink" title="Node School"></a><a href="http://nodeschool.io/" target="_blank" rel="external">Node School</a></h3><h1 id="알고리즘"><a href="#알고리즘" class="headerlink" title="알고리즘"></a>알고리즘</h1><h3 id="Euler-Project-오일러-프로젝트-한글"><a href="#Euler-Project-오일러-프로젝트-한글" class="headerlink" title="Euler Project(오일러 프로젝트 한글)"></a><a href="http://euler.synap.co.kr/" target="_blank" rel="external">Euler Project(오일러 프로젝트 한글)</a></h3><h3 id="Euler-Project-영문"><a href="#Euler-Project-영문" class="headerlink" title="Euler Project(영문)"></a><a href="https://projecteuler.net/" target="_blank" rel="external">Euler Project(영문)</a></h3><h3 id="Google-codejam"><a href="#Google-codejam" class="headerlink" title="Google codejam"></a><a href="https://code.google.com/codejam/" target="_blank" rel="external">Google codejam</a></h3><h3 id="Top-Coder"><a href="#Top-Coder" class="headerlink" title="Top Coder"></a><a href="https://www.topcoder.com/" target="_blank" rel="external">Top Coder</a></h3><h1 id="해킹-보안"><a href="#해킹-보안" class="headerlink" title="해킹 / 보안"></a>해킹 / 보안</h1><h3 id="해커스쿨"><a href="#해커스쿨" class="headerlink" title="해커스쿨"></a><a href="http://www.hackerschool.org/Sub_Html/HS_Community/index.html" target="_blank" rel="external">해커스쿨</a></h3><h3 id="webhacking-kr"><a href="#webhacking-kr" class="headerlink" title="webhacking.kr"></a><a href="http://webhacking.kr/" target="_blank" rel="external">webhacking.kr</a></h3><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h3 id="GitHub-Git"><a href="#GitHub-Git" class="headerlink" title="GitHub / Git"></a><a href="https://github.com/" target="_blank" rel="external">GitHub / Git</a></h3><h3 id="Git간편-안내서"><a href="#Git간편-안내서" class="headerlink" title="Git간편 안내서"></a><a href="https://rogerdudler.github.io/git-guide/index.ko.html" target="_blank" rel="external">Git간편 안내서</a></h3><h3 id="Git-쉽게-따라-배우기"><a href="#Git-쉽게-따라-배우기" class="headerlink" title="Git 쉽게 따라 배우기"></a><a href="http://learngitbranching.js.org/" target="_blank" rel="external">Git 쉽게 따라 배우기</a></h3><h3 id="Vim-Adventure"><a href="#Vim-Adventure" class="headerlink" title="Vim Adventure"></a><a href="http://vim-adventures.com/" target="_blank" rel="external">Vim Adventure</a></h3><h1 id="좋은-블로그-팟캐스트"><a href="#좋은-블로그-팟캐스트" class="headerlink" title="좋은 블로그 / 팟캐스트"></a>좋은 블로그 / 팟캐스트</h1><h3 id="나는-프로그래머다"><a href="#나는-프로그래머다" class="headerlink" title="나는 프로그래머다"></a><a href="https://iamprogrammer.io/" target="_blank" rel="external">나는 프로그래머다</a></h3><h3 id="More-Agile-보다-나은-개발자가-되기-위하여"><a href="#More-Agile-보다-나은-개발자가-되기-위하여" class="headerlink" title="More Agile 보다 나은 개발자가 되기 위하여"></a><a href="http://www.moreagile.net/" target="_blank" rel="external">More Agile 보다 나은 개발자가 되기 위하여</a></h3><h1 id="기타"><a href="#기타" class="headerlink" title="기타"></a>기타</h1><h3 id="Google-Power-Search"><a href="#Google-Power-Search" class="headerlink" title="Google Power Search"></a><a href="http://www.powersearchingwithgoogle.com/" target="_blank" rel="external">Google Power Search</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;프로그래밍(주로 웹) 공부에 도움이 되는 사이트를 모아보았습니다.&lt;/p&gt;
&lt;h1 id=&quot;웹-기초&quot;&gt;&lt;a href=&quot;#웹-기초&quot; class=&quot;headerlink&quot; title=&quot;웹 기초&quot;&gt;&lt;/a&gt;웹 기초&lt;/h1&gt;&lt;p&gt;웹의 기초적인 부분을 배울 수 있
    
    </summary>
    
      <category term="교육" scheme="https://voidsatisfaction.github.io/categories/%EA%B5%90%EC%9C%A1/"/>
    
    
      <category term="프로그래밍 교육" scheme="https://voidsatisfaction.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B5%90%EC%9C%A1/"/>
    
  </entry>
  
  <entry>
    <title>React Native 공부기 1 ~ bind</title>
    <link href="https://voidsatisfaction.github.io/2016/08/24/2016-8-24-b-rn/"/>
    <id>https://voidsatisfaction.github.io/2016/08/24/2016-8-24-b-rn/</id>
    <published>2016-08-24T12:52:00.000Z</published>
    <updated>2016-09-26T15:38:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="포인트"><a href="#포인트" class="headerlink" title="포인트"></a>포인트</h2><p><strong>bind는 this의 scope를 제어하기 위한 메소드이다.</strong></p>
<h2 id="Real-code"><a href="#Real-code" class="headerlink" title="Real code"></a>Real code</h2><h3 id="Core-부분"><a href="#Core-부분" class="headerlink" title="Core 부분"></a>Core 부분</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Stopwatch</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  componentWillMount() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">mainTime</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">subTime</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">timerOn</span>: <span class="literal">false</span>,</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state)</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Buttons</div><div class="line">          startTime=&#123;this._startTime&#125;</div><div class="line">          stopTime=&#123;this._stopTime&#125;</div><div class="line">          stopWatch=&#123;this&#125;/&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _startTime()&#123;</div><div class="line">    if (!this.state.timerOn)&#123;</div><div class="line">      var timer = setInterval(() =&gt; &#123;</div><div class="line">        let mainTime = this.state.mainTime</div><div class="line">        let subTime = this.state.subTime</div><div class="line"></div><div class="line">        this.setState(&#123;</div><div class="line">          mainTime: mainTime + 1,</div><div class="line">          subTime: subTime + 1,</div><div class="line">        &#125;)</div><div class="line">      &#125;, 100)</div><div class="line"></div><div class="line">      this.setState(&#123;</div><div class="line">        timer: timer,</div><div class="line">        timerOn: true,</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _stopTime() &#123;</div><div class="line">    clearInterval(this.state.timer)</div><div class="line"></div><div class="line">    this.setState(&#123;</div><div class="line">      timerOn: false,</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위의 코드에서 주목할 부분은 Buttons라는 컴포넌트에 stopWatch={this}즉,<br>props를 이용하여 this 전체를 건네주고 있다는 점이다.</p>
<h3 id="Buttons-컴포넌트"><a href="#Buttons-컴포넌트" class="headerlink" title="Buttons 컴포넌트"></a>Buttons 컴포넌트</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buttons</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;day1Style.buttons&#125;&gt;</div><div class="line">        &lt;TouchableOpacity</div><div class="line">          style=&#123;day1Style.button&#125;</div><div class="line">          onPress=&#123;this.props.startTime.bind(this.props.stopWatch)&#125;&gt;</div><div class="line">          &lt;Text&gt;</div><div class="line">            start</div><div class="line">          &lt;/Text&gt;</div><div class="line">        &lt;/TouchableOpacity&gt;</div><div class="line">        &lt;TouchableOpacity</div><div class="line">          style=&#123;day1Style.button&#125;</div><div class="line">          onPress=&#123;this.props.stopTime.bind(this.props.stopWatch)&#125;&gt;</div><div class="line">          &lt;Text&gt;</div><div class="line">            End</div><div class="line">          &lt;/Text&gt;</div><div class="line">        &lt;/TouchableOpacity&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>그리고 Buttons라는 component를 보면 TouchableOpacity의 onPress속성에서<br><code>this.props.startTime.bind(this.props.stopWatch)</code>로 되어있는것을 알 수 있다.</p>
<p>여기서 왜 <code>bind(this.props.stopWatch)</code>를 해야만 하는가 하면<br>그냥 this.props.startTime을 실행해버리면<br><strong>startTime함수 안의 this가 Buttons의 this가 되어버리기 때문이다.</strong></p>
<p>우리가 제어하고 싶은 state는 Stopwatch component에 존재하기 때문에<br>startTime함수의 this의 scope를 Stopwatch에 bind시켜줄 필요가 있다.</p>
<p>따라서 bind(this.props.stopWatch) 즉, bind(Stopwatch component 전체)로 this를 고정시켜줌으로써<br>이러한 문제를 해결시켜줄 수 있다.</p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><p><a href="https://g6ling.gitbooks.io/react-native-tutorial-korean/content/2_5ko.html" target="_blank" rel="external">RN JS 연습 - 3</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/2236747/use-of-the-javascript-bind-method" target="_blank" rel="external">Use of the JavaScript ‘bind’ method</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;포인트&quot;&gt;&lt;a href=&quot;#포인트&quot; class=&quot;headerlink&quot; title=&quot;포인트&quot;&gt;&lt;/a&gt;포인트&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;bind는 this의 scope를 제어하기 위한 메소드이다.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Rea
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/categories/JavaScript/React-Native/"/>
    
    
      <category term="React Native" scheme="https://voidsatisfaction.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 공부기 3 ~ Web Application만들기</title>
    <link href="https://voidsatisfaction.github.io/2016/08/24/2016-8-24-a-nodestudy3/"/>
    <id>https://voidsatisfaction.github.io/2016/08/24/2016-8-24-a-nodestudy3/</id>
    <published>2016-08-24T02:52:00.000Z</published>
    <updated>2016-09-26T15:37:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="선생님"><a href="#선생님" class="headerlink" title="선생님"></a>선생님</h2><p>생활코딩 Nodejs</p>
<h2 id="배운-내용들"><a href="#배운-내용들" class="headerlink" title="배운 내용들"></a>배운 내용들</h2><blockquote>
<p>우리는 비게 오게 해달라 오지 않게 해달라고 기도한다.</p>
<p>하지만 진정한 기도는 비가 와도 오지 않아도 자기자신이 흔들리지 않게 해달라는 해탈을 위한 기도이다.</p>
</blockquote>
<p>고생고생해서 CRUD하나 만들었는데 확실히 Nodejs가 편리한 면이 있다.<br>그러나 앱을 만드는데에 있어서 중요한 것은<br>한번에 다 하려고 하지 않고 하나한 차근차근 해나가는 것이다.<br>즉, 기획을 완벽히 하고 앱을 제작하자.</p>
<p>여기서 기획이라 함은 어떠한 객체가 어떻게 작용하는지, 어떤 흐름으로 작동하는지를<br>명확히 한 것을 의미한다.</p>
<p><strong>백날 디버깅하는 것 보다 한 번 기획을 잘하는 것이 효율적이다.</strong></p>
<h2 id="Real-code"><a href="#Real-code" class="headerlink" title="Real code"></a>Real code</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">const</span> app = express()</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</div><div class="line"><span class="keyword">const</span> Oriento = <span class="built_in">require</span>(<span class="string">'oriento'</span>);</div><div class="line"><span class="keyword">const</span> server = Oriento(&#123;</div><div class="line">  <span class="attr">host</span>: <span class="string">'localhost'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">2424</span>,</div><div class="line">  <span class="attr">username</span>: <span class="string">'root'</span>,</div><div class="line">  <span class="attr">password</span>: <span class="string">'***'</span> <span class="comment">// You should save password on config file for proper security</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> db = server.use(<span class="string">'o2'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Using database: '</span> + db.name)</div><div class="line"></div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</div><div class="line">app.locals.pretty = <span class="literal">true</span></div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>)</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'pug'</span>)</div><div class="line"></div><div class="line">app.get(<span class="string">'/topic/add'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.render(<span class="string">'add'</span>)</div><div class="line">&#125;)</div><div class="line">app.post(<span class="string">'/topic/add'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> title = req.body.post_title</div><div class="line">  <span class="keyword">const</span> name = req.body.post_name</div><div class="line">  <span class="keyword">const</span> description = req.body.post_description</div><div class="line"></div><div class="line">  <span class="keyword">const</span> sql = <span class="string">'INSERT INTO topic (title, author, description) VALUES(:title, :name, :description)'</span></div><div class="line">  db.query(sql, &#123;<span class="attr">params</span>: &#123;<span class="attr">title</span>: title, <span class="attr">name</span>: name, <span class="attr">description</span>: description&#125;&#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(result)</div><div class="line">    <span class="keyword">const</span> id = <span class="built_in">encodeURIComponent</span>(result[<span class="string">'@rid'</span>])</div><div class="line">    res.redirect(<span class="string">'/topic/'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/topic/:id/edit'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> id = <span class="built_in">decodeURIComponent</span>(req.params.id)</div><div class="line">  <span class="keyword">const</span> sql = <span class="string">'SELECT FROM topic where @rid=:rid'</span></div><div class="line">  db.query(sql, &#123;<span class="attr">params</span>: &#123;<span class="attr">rid</span>: id&#125;&#125;).then(<span class="function">(<span class="params">topic</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(topic)</div><div class="line">    res.render(<span class="string">'edit'</span>, &#123;<span class="attr">topic</span>: topic[<span class="number">0</span>]&#125;) <span class="comment">// Be careful!! topic[0]</span></div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line">app.post(<span class="string">'/topic/:id/edit'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> rid = <span class="built_in">decodeURIComponent</span>(req.params.id)</div><div class="line">  <span class="keyword">const</span> title = req.body.post_title</div><div class="line">  <span class="keyword">const</span> name = req.body.post_name</div><div class="line">  <span class="keyword">const</span> description = req.body.post_description</div><div class="line"></div><div class="line">  <span class="keyword">const</span> sql = <span class="string">`UPDATE topic SET title=:title, author=:name,</span></div><div class="line">  description=:description WHERE @rid=:rid` <span class="comment">//no comma plz</span></div><div class="line">  db.query(sql, &#123;</div><div class="line">    <span class="attr">params</span>: &#123;</div><div class="line">      <span class="attr">rid</span>: rid,</div><div class="line">      <span class="attr">title</span>: title,</div><div class="line">      <span class="attr">name</span>: name,</div><div class="line">      <span class="attr">description</span>: description&#125;</div><div class="line">    &#125;).then(<span class="function">(<span class="params">topic</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'edit complete'</span>)</div><div class="line">    res.redirect(<span class="string">'/topic/'</span> + <span class="built_in">encodeURIComponent</span>(req.params.id))</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/topic/:id/delete'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> rid = <span class="built_in">decodeURIComponent</span>(req.params.id)</div><div class="line">  <span class="keyword">const</span> sql = <span class="string">'DELETE FROM topic WHERE @rid=:rid'</span></div><div class="line"></div><div class="line">  db.query(sql, &#123;<span class="attr">params</span>: &#123;<span class="attr">rid</span>: rid&#125;&#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'delete successfully'</span>)</div><div class="line">    res.redirect(<span class="string">'/topic/'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">app.get([<span class="string">'/topic'</span>, <span class="string">'/topic/:id'</span>], (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> sql = <span class="string">'SELECT FROM topic'</span></div><div class="line">  db.query(sql).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (req.params.id) &#123;</div><div class="line">      <span class="keyword">const</span> id = <span class="built_in">decodeURIComponent</span>(req.params.id)</div><div class="line">      <span class="keyword">const</span> sql2 = <span class="string">'SELECT FROM topic WHERE @rid=:rid'</span> <span class="comment">// rid should be placed inside of next's params!</span></div><div class="line">      db.query(sql2, &#123;<span class="attr">params</span>: &#123;<span class="attr">rid</span>: id&#125;&#125;).then(<span class="function">(<span class="params">topic</span>) =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(topic)</div><div class="line">        res.render(<span class="string">'topic'</span>, &#123;<span class="attr">topic</span>: topic[<span class="number">0</span>], <span class="attr">topics</span>: results&#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.render(<span class="string">'topic'</span>, &#123;<span class="attr">topic</span>: &#123;<span class="attr">title</span>: <span class="string">'Welcome!'</span>, <span class="attr">name</span>: <span class="string">'Master'</span>, <span class="attr">description</span>: <span class="string">'Practicing'</span>&#125;, <span class="attr">topics</span>: results&#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Server connected at 3000!'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;선생님&quot;&gt;&lt;a href=&quot;#선생님&quot; class=&quot;headerlink&quot; title=&quot;선생님&quot;&gt;&lt;/a&gt;선생님&lt;/h2&gt;&lt;p&gt;생활코딩 Nodejs&lt;/p&gt;
&lt;h2 id=&quot;배운-내용들&quot;&gt;&lt;a href=&quot;#배운-내용들&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="Nodejs" scheme="https://voidsatisfaction.github.io/categories/JavaScript/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://voidsatisfaction.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 공부기 2</title>
    <link href="https://voidsatisfaction.github.io/2016/08/23/2016-8-23-c-nodestudy2/"/>
    <id>https://voidsatisfaction.github.io/2016/08/23/2016-8-23-c-nodestudy2/</id>
    <published>2016-08-23T14:59:00.000Z</published>
    <updated>2016-09-26T15:36:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="선생님"><a href="#선생님" class="headerlink" title="선생님"></a>선생님</h2><p>생활코딩 Nodejs</p>
<h2 id="배운-내용들"><a href="#배운-내용들" class="headerlink" title="배운 내용들"></a>배운 내용들</h2><h3 id="File-Based-Web-App"><a href="#File-Based-Web-App" class="headerlink" title="File Based Web App"></a>File Based Web App</h3><ul>
<li><p>Get / Post</p>
<ul>
<li><p>Get : Using URL</p>
</li>
<li><p>Post : No URL</p>
<ul>
<li>bodyParser</li>
</ul>
</li>
</ul>
</li>
<li><p>Web App Making</p>
<ul>
<li><p>CR(UD)</p>
</li>
<li><p>Removing Overlapped Expression</p>
</li>
</ul>
</li>
<li><p>File Uploading</p>
<ul>
<li>Multer</li>
</ul>
</li>
</ul>
<h3 id="ETC"><a href="#ETC" class="headerlink" title="ETC"></a>ETC</h3><ul>
<li>Nodejs Auto-restart(supervisor module)</li>
</ul>
<h2 id="Real-code"><a href="#Real-code" class="headerlink" title="Real code"></a>Real code</h2><h3 id="App-js-CR-File-upload"><a href="#App-js-CR-File-upload" class="headerlink" title="App.js(CR,File upload)"></a>App.js(CR,File upload)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</div><div class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>)</div><div class="line"><span class="keyword">const</span> _storage = multer.diskStorage(&#123;</div><div class="line">  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</div><div class="line">    cb(<span class="literal">null</span>, <span class="string">'uploads/'</span>)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</div><div class="line">    cb(<span class="literal">null</span>, file.originalname + <span class="string">'-'</span> + <span class="built_in">Date</span>.now())</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> upload = multer(&#123; <span class="attr">storage</span>: _storage &#125;)</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">const</span> app = express()</div><div class="line"></div><div class="line">app.use(<span class="string">'/user'</span>, express.static(<span class="string">'uploads'</span>)) <span class="comment">// uploads에 있는 파일들을 /user라는 url을통해서 서비스 하겠다. (유저가 갖고 갈 수 있게 함.)</span></div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>)</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'pug'</span>)</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.send(<span class="string">'hi fool!'</span> )</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/upload'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.render(<span class="string">'upload'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// Middle ware first(processing)</span></div><div class="line">app.post(<span class="string">'/upload'</span>, upload.single(<span class="string">'userfile'</span>), (req, res) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(req.file)</div><div class="line">  res.send(<span class="string">'Uploaded : '</span> + req.file.filename)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/topic/new'</span>, (req, res) =&gt; &#123;</div><div class="line">  fs.readdir(<span class="string">'data'</span>, (err, files) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(err)</div><div class="line">      res.status(<span class="number">500</span>).send(<span class="string">'Internal Server Error'</span>)</div><div class="line">    &#125;</div><div class="line">    res.render(<span class="string">'new'</span>, &#123; <span class="attr">topics</span>: files&#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get([<span class="string">'/topic'</span>, <span class="string">'/topic/:id'</span>], (req, res) =&gt; &#123;</div><div class="line">  fs.readdir(<span class="string">'data'</span>, (err, files) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(err)</div><div class="line">      res.status(<span class="number">500</span>).send(<span class="string">'Internal Server Error'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> id = req.params.id</div><div class="line">    <span class="keyword">if</span> (id) &#123;</div><div class="line">      fs.readFile(<span class="string">`data/<span class="subst">$&#123;id&#125;</span>`</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="built_in">console</span>.log(err)</div><div class="line">          res.status(<span class="number">500</span>).send(<span class="string">'Internal Server Error'</span>)</div><div class="line">        &#125;</div><div class="line">        res.render(<span class="string">'view'</span>, &#123; <span class="attr">title</span>: id, <span class="attr">topics</span>: files, <span class="attr">description</span>: data&#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.render(<span class="string">'view'</span>, &#123; <span class="attr">topics</span>: files, <span class="attr">title</span>: <span class="string">'Welcome'</span>, <span class="attr">description</span>: <span class="string">'Hello, JavaScript for server.'</span> &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.post(<span class="string">'/topic'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> title = req.body.title</div><div class="line">  <span class="keyword">const</span> description = req.body.description</div><div class="line"></div><div class="line">  fs.writeFile(<span class="string">`data/<span class="subst">$&#123;title&#125;</span>`</span>,description, (err) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      res.status(<span class="number">500</span>).send(<span class="string">'Internal Server Error!'</span>)</div><div class="line">    &#125;</div><div class="line">    res.redirect(<span class="string">'/topic'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Connected at 3000port!'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;선생님&quot;&gt;&lt;a href=&quot;#선생님&quot; class=&quot;headerlink&quot; title=&quot;선생님&quot;&gt;&lt;/a&gt;선생님&lt;/h2&gt;&lt;p&gt;생활코딩 Nodejs&lt;/p&gt;
&lt;h2 id=&quot;배운-내용들&quot;&gt;&lt;a href=&quot;#배운-내용들&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="Nodejs" scheme="https://voidsatisfaction.github.io/categories/JavaScript/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://voidsatisfaction.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Scheme의 아름다움 ~ Continuation</title>
    <link href="https://voidsatisfaction.github.io/2016/08/23/2016-8-23-b-schemestudy/"/>
    <id>https://voidsatisfaction.github.io/2016/08/23/2016-8-23-b-schemestudy/</id>
    <published>2016-08-23T14:52:00.000Z</published>
    <updated>2016-09-26T15:34:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="선생님"><a href="#선생님" class="headerlink" title="선생님"></a>선생님</h2><p>The Little Schemer</p>
<h2 id="배운-내용들"><a href="#배운-내용들" class="headerlink" title="배운 내용들"></a>배운 내용들</h2><ul>
<li><p>lambda</p>
<ul>
<li><p>함수의 return값으로 함수를 건네줄 수 있다.</p>
</li>
<li><p>그 함수는 lambda함수를 이용해서 건네줄 수 있다.</p>
</li>
</ul>
</li>
<li><p>Collecter</p>
<ul>
<li><p>함수가 여러 값을 나타낼 수 있도록 도와준다. 값의 Collect</p>
</li>
<li><p>아직 완벽하지 이해하지는 못했으나 정말 아름다워 보인다.</p>
</li>
</ul>
</li>
</ul>
<h2 id="Real-code"><a href="#Real-code" class="headerlink" title="Real code"></a>Real code</h2><h3 id="예제1"><a href="#예제1" class="headerlink" title="예제1"></a>예제1</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#| Remeber more than two value at a time |#</span></div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">multiinsertLR</span> new oldL oldR lat)</div><div class="line">  (<span class="name"><span class="builtin-name">cond</span></span> ((<span class="name"><span class="builtin-name">null?</span></span> lat) '())</div><div class="line">        ((<span class="name"><span class="builtin-name">eq?</span></span> oldL (<span class="name"><span class="builtin-name">car</span></span> lat))</div><div class="line">         (<span class="name"><span class="builtin-name">cons</span></span> new</div><div class="line">          (<span class="name"><span class="builtin-name">cons</span></span> oldL</div><div class="line">            (<span class="name">multiinsertLR</span> new oldL oldR (<span class="name"><span class="builtin-name">cdr</span></span> lat)))))</div><div class="line">        ((<span class="name"><span class="builtin-name">eq?</span></span> oldR (<span class="name"><span class="builtin-name">car</span></span> lat))</div><div class="line">         (<span class="name"><span class="builtin-name">cons</span></span> oldR</div><div class="line">          (<span class="name"><span class="builtin-name">cons</span></span> new</div><div class="line">            (<span class="name">multiinsertLR</span> new oldL oldR (<span class="name"><span class="builtin-name">cdr</span></span> lat)))))</div><div class="line">        (<span class="name"><span class="builtin-name">else</span></span></div><div class="line">         (<span class="name"><span class="builtin-name">cons</span></span> (<span class="name"><span class="builtin-name">car</span></span> lat)</div><div class="line">          (<span class="name">multiinsertLR</span> new oldL oldR (<span class="name"><span class="builtin-name">cdr</span></span> lat))))))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">multiinsertLR&amp;co</span> new oldL oldR lat col)</div><div class="line">  (<span class="name"><span class="builtin-name">cond</span></span> ((<span class="name"><span class="builtin-name">null?</span></span> lat)</div><div class="line">         (<span class="name">col</span> '() <span class="number">0</span> <span class="number">0</span>))</div><div class="line">        ((<span class="name"><span class="builtin-name">eq?</span></span> oldL (<span class="name"><span class="builtin-name">car</span></span> lat))</div><div class="line">         (<span class="name">multiinsertLR&amp;co</span> new oldL oldR</div><div class="line">                           (<span class="name"><span class="builtin-name">cdr</span></span> lat)</div><div class="line">                           (<span class="name"><span class="builtin-name">lambda</span></span> (newlat L R)</div><div class="line">                             (<span class="name">col</span> (<span class="name"><span class="builtin-name">cons</span></span> new</div><div class="line">                                (<span class="name"><span class="builtin-name">cons</span></span> oldL newlat)) (<span class="name"><span class="builtin-name">+</span></span> L <span class="number">1</span>) R))))</div><div class="line">        ((<span class="name"><span class="builtin-name">eq?</span></span> oldR (<span class="name"><span class="builtin-name">car</span></span> lat))</div><div class="line">         (<span class="name">multiinsertLR&amp;co</span> new oldL oldR</div><div class="line">                           (<span class="name"><span class="builtin-name">cdr</span></span> lat)</div><div class="line">                           (<span class="name"><span class="builtin-name">lambda</span></span> (newlat L R)</div><div class="line">                             (<span class="name">col</span> (<span class="name"><span class="builtin-name">cons</span></span> oldR</div><div class="line">                                (<span class="name"><span class="builtin-name">cons</span></span> new newlat)) L (<span class="name"><span class="builtin-name">+</span></span> R <span class="number">1</span>)))))</div><div class="line">        (<span class="name"><span class="builtin-name">else</span></span></div><div class="line">         (<span class="name">multiinsertLR&amp;co</span> new oldL oldR</div><div class="line">                           (<span class="name"><span class="builtin-name">cdr</span></span> lat)</div><div class="line">                           (<span class="name"><span class="builtin-name">lambda</span></span> (newlat L R)</div><div class="line">                             (<span class="name">col</span> (<span class="name"><span class="builtin-name">cons</span></span> (<span class="name"><span class="builtin-name">car</span></span> lat) newlat) L R))))))</div><div class="line"></div><div class="line">(<span class="name">multiinsertLR&amp;co</span> <span class="symbol">'salty</span> <span class="symbol">'fish</span> <span class="symbol">'chips</span> '(chips and fish or fish and chips) (<span class="name"><span class="builtin-name">lambda</span></span> (lat a b) (<span class="name"><span class="builtin-name">cons</span></span> a (<span class="name"><span class="builtin-name">cons</span></span> b lat))))</div></pre></td></tr></table></figure>
<h4 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h4><p>만약 위의 multiinsertLR&amp;co함수가<br>(multiinsertLR&amp;co ‘hi ‘animal ‘plant ‘(hello world) col)<br>이렇게 실행된다고 하자. (여기서 col은 아직 미정의)</p>
<p>그러면, 조건 분기에서 다음이 실행된다.</p>
<p>(car lat)인 ‘hello는 oldL, oldR과도 다르므로<br>else 이후의 내용이 실행된다.<br>그런데 여기서 바로 (multiinsertLR&amp;co)함수를 인수만 바꿔서 실행한다.<br>특히 바뀌는 것은 col만 바뀌므로 그쪽에만 집중해서 보기로 하자.</p>
<p>두 번째 multiinsertLR&amp;co의 실행에서<br>col =&gt; (lambda (newlat L R) (col (cons (car lat) newlat) L R))<br>즉, 이는 (col (newlat L R) (col (cons (car lat) newlat) L R))<br>과도 동일하다.</p>
<p>풀어서 얘기하자면, 두번째 multiinsertLR&amp;co는 col에 대한부분이<br>(col (newlat L R) (col (cons (car lat) newlat) L R)) 이렇게 변하는 것이며,<br>(car lat)이 ‘hello 였으므로,<br>(col (newlat L R) (col (cons ‘hello newlat) L R))이 col 인자로 넘어가게 된다.</p>
<p>다음 프로세스<br>(car lat)인 ‘world는 oldL, oldR과도 다르므로<br>else 이후의 내용이 실행된다.<br>그리고 마찬가지로 col만 변화가 되므로 col에만 집중해서 보자.</p>
<p>세번째 multiinsertLR&amp;co의 실행에서<br>col =&gt; (lambda (newlat L R) (col (cons ‘world newlat) L R))<br>여기서 주목해야할 것은 화살표 왼쪽의 col과 오른쪽의 col을 구별하는 것이다.<br><strong>왼쪽의 col은 앞으로 col의 자리에 넘겨주게 될 함수의 인자를 의미하는 것이며,</strong><br><strong>오른쪽의 col은 현재 실행되는 함수의 col을 말하는 것이다.</strong></p>
<p>여기서 우리는 현재 실행되는 함수의 col이 전multiinsertLR&amp;co에서 인자로서 받아온<br>(col (newlat L R) (col (cons ‘hello newlat) L R))이 된다는 것을 알기때문에<br>우리가 다음 multiinsertLR&amp;co에 전해줄 col은<br>col(전해줄 col) =&gt; (lambda (newlat L R) (col(가장 처음의 col) (cons ‘hello (cons ‘world newlat)) L R))</p>
<p>이렇게 됨을 알 수있다.</p>
<p>마지막 multiinsertLR&amp;co를 실행하면<br>(null? lat)이 참이므로<br>(col ‘() 0 0)이 실행되는데 col은 위에서 받아온 그대로이므로<br>(col (cons ‘hello (cons ‘world ‘())) L R)이 된다.<br>즉, 최종 결과는 (col (hello world) L R)이며,<br>이는 하나의 함수가 리스트를 이용하여 다양한 값을 저장할 수 있다는 것을 의미한다.</p>
<h3 id="예제2-p-s-정말-아름다운-코드다"><a href="#예제2-p-s-정말-아름다운-코드다" class="headerlink" title="예제2 (p.s 정말 아름다운 코드다)"></a>예제2 (p.s 정말 아름다운 코드다)</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">atom?</span> s)</div><div class="line">  (<span class="name"><span class="builtin-name">and</span></span> (<span class="name"><span class="builtin-name">not</span></span> (<span class="name"><span class="builtin-name">pair?</span></span> s)) (<span class="name"><span class="builtin-name">not</span></span> (<span class="name"><span class="builtin-name">null?</span></span> s))))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">evens-only*</span> l)</div><div class="line">  (<span class="name"><span class="builtin-name">cond</span></span> ((<span class="name"><span class="builtin-name">null?</span></span> l) '())</div><div class="line">        ((<span class="name"><span class="builtin-name">and</span></span> (<span class="name">atom?</span> (<span class="name"><span class="builtin-name">car</span></span> l)) (<span class="name"><span class="builtin-name">even?</span></span> (<span class="name"><span class="builtin-name">car</span></span> l)))</div><div class="line">         (<span class="name"><span class="builtin-name">cons</span></span> (<span class="name"><span class="builtin-name">car</span></span> l) (<span class="name">evens-only*</span> (<span class="name"><span class="builtin-name">cdr</span></span> l))))</div><div class="line">        ((<span class="name">atom?</span> (<span class="name"><span class="builtin-name">car</span></span> l))</div><div class="line">         (<span class="name">evens-only*</span> (<span class="name"><span class="builtin-name">cdr</span></span> l)))</div><div class="line">        (<span class="name"><span class="builtin-name">else</span></span></div><div class="line">         (<span class="name"><span class="builtin-name">cons</span></span> (<span class="name">evens-only*</span> (<span class="name"><span class="builtin-name">car</span></span> l)) (<span class="name">evens-only*</span> (<span class="name"><span class="builtin-name">cdr</span></span> l))))))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">evens-only*&amp;co</span> l col)</div><div class="line">  (<span class="name"><span class="builtin-name">cond</span></span> ((<span class="name"><span class="builtin-name">null?</span></span> l)</div><div class="line">         (<span class="name">col</span> '() <span class="number">1</span> <span class="number">0</span>))</div><div class="line">        ((<span class="name"><span class="builtin-name">and</span></span> (<span class="name">atom?</span> (<span class="name"><span class="builtin-name">car</span></span> l)) (<span class="name"><span class="builtin-name">even?</span></span> (<span class="name"><span class="builtin-name">car</span></span> l)))</div><div class="line">         (<span class="name">evens-only*&amp;co</span> (<span class="name"><span class="builtin-name">cdr</span></span> l)</div><div class="line">                         (<span class="name"><span class="builtin-name">lambda</span></span> (newl mul sum)</div><div class="line">                           (<span class="name">col</span> (<span class="name"><span class="builtin-name">cons</span></span> (<span class="name"><span class="builtin-name">car</span></span> l) newl)</div><div class="line">                                (<span class="name"><span class="builtin-name">*</span></span> (<span class="name"><span class="builtin-name">car</span></span> l) mul)</div><div class="line">                                sum))))</div><div class="line">        ((<span class="name">atom?</span> (<span class="name"><span class="builtin-name">car</span></span> l))</div><div class="line">         (<span class="name">evens-only*&amp;co</span> (<span class="name"><span class="builtin-name">cdr</span></span> l)</div><div class="line">                         (<span class="name"><span class="builtin-name">lambda</span></span> (newl mul sum)</div><div class="line">                           (<span class="name">col</span> newl mul</div><div class="line">                                (<span class="name"><span class="builtin-name">+</span></span> (<span class="name"><span class="builtin-name">car</span></span> l) sum)))))</div><div class="line">        (<span class="name"><span class="builtin-name">else</span></span></div><div class="line">         (<span class="name">evens-only*&amp;co</span> (<span class="name"><span class="builtin-name">car</span></span> l)</div><div class="line">                         (<span class="name"><span class="builtin-name">lambda</span></span> (al ap as)</div><div class="line">                           (<span class="name">evens-only*&amp;co</span> (<span class="name"><span class="builtin-name">cdr</span></span> l)</div><div class="line">                                           (<span class="name"><span class="builtin-name">lambda</span></span> (dl dp ds)</div><div class="line">                                             (<span class="name">col</span> (<span class="name"><span class="builtin-name">cons</span></span> al dl)</div><div class="line">                                                  (<span class="name"><span class="builtin-name">*</span></span> ap dp)</div><div class="line">                                                  (<span class="name"><span class="builtin-name">+</span></span> as ds)))))))))</div><div class="line"></div><div class="line">(<span class="name">evens-only*&amp;co</span> '((<span class="number">9</span> <span class="number">1</span> <span class="number">2</span> <span class="number">8</span>) <span class="number">3</span> <span class="number">10</span> ((<span class="number">9</span> <span class="number">9</span>) <span class="number">7</span> <span class="number">6</span>) <span class="number">2</span>)</div><div class="line">             (<span class="name"><span class="builtin-name">lambda</span></span> (l mul sum)</div><div class="line">               (<span class="name"><span class="builtin-name">cons</span></span> sum (<span class="name"><span class="builtin-name">cons</span></span> mul l))))</div></pre></td></tr></table></figure>
<h4 id="해설-1"><a href="#해설-1" class="headerlink" title="해설"></a>해설</h4><p><strong>머리로는 이해했으나 가슴으로는 이해하지 못했다.</strong></p>
<p>결국, else이후의 구문이 문제가 되는 것인데<br>여기서 포인트는 아래와 같다.</p>
<p><strong>무엇이 먼저 실행되는가?</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(else</div><div class="line"> (evens-only*&amp;co (car l)</div><div class="line">                 (lambda (al ap as)</div><div class="line">                   (evens-only*&amp;co (cdr l)</div><div class="line">                                   (lambda (dl dp ds)</div><div class="line">                                     (col (cons al dl)</div><div class="line">                                          (* ap dp)</div><div class="line">                                          (+ as ds)))))))))</div></pre></td></tr></table></figure>
<p>만약 우리가 위의 원래의 함수를 어떤 리스트를 넣어서 실행했다고<br>생각한다면 else이후의 내용이 실행되었을때 어떤것들이 어떤순서로 실행될까?</p>
<p><strong>답은 뒤에위치한 앞에있는 evens-only*&amp;co의 부분이 먼저 실행된다는 것이다</strong></p>
<p>그렇다는 얘기는 만일 l이 ‘((hi nice to meet you) my name is amy) 인 경우에<br>(car l)인 리스트가 evens-only*&amp;co의 함수에 input되는 것이 아니라<br>뒷부분의 my 이후의 (cdr l)부분이 먼저 col에 저장된다.</p>
<p>그리고 atom들의 collect가 끝나서야 (hi nice to meet you)부분이 collect되어 합쳐진다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;선생님&quot;&gt;&lt;a href=&quot;#선생님&quot; class=&quot;headerlink&quot; title=&quot;선생님&quot;&gt;&lt;/a&gt;선생님&lt;/h2&gt;&lt;p&gt;The Little Schemer&lt;/p&gt;
&lt;h2 id=&quot;배운-내용들&quot;&gt;&lt;a href=&quot;#배운-내용들&quot; class=&quot;he
    
    </summary>
    
      <category term="Scheme" scheme="https://voidsatisfaction.github.io/categories/Scheme/"/>
    
      <category term="Schemer series" scheme="https://voidsatisfaction.github.io/categories/Scheme/Schemer-series/"/>
    
    
      <category term="Scheme" scheme="https://voidsatisfaction.github.io/tags/Scheme/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 공부기 1</title>
    <link href="https://voidsatisfaction.github.io/2016/08/23/2016-8-23-a-nodestudy/"/>
    <id>https://voidsatisfaction.github.io/2016/08/23/2016-8-23-a-nodestudy/</id>
    <published>2016-08-23T02:52:00.000Z</published>
    <updated>2016-09-27T01:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="선생님"><a href="#선생님" class="headerlink" title="선생님"></a>선생님</h2><p><a href="https://opentutorials.org/course/2136/" target="_blank" rel="external">생활코딩 Nodejs</a></p>
<h2 id="배운-내용들"><a href="#배운-내용들" class="headerlink" title="배운 내용들"></a>배운 내용들</h2><h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><ul>
<li><p>Nodejs?</p>
</li>
<li><p>Client and Server</p>
</li>
<li><p>NPM</p>
<ul>
<li><code>npm init</code> =&gt; package.json 파일 작성</li>
<li><code>npm install underscore (--save)</code> =&gt; node_modules폴더에 underscore추가, –save는 package.json에 dependencies추가</li>
<li>Example : Uglify, Express, Underscore</li>
</ul>
</li>
<li><p>Callback Function</p>
<ul>
<li>코드상에서 직접 호출되는 것이 아니고, 누군가가 호출하는 함수. <strong>(정의가 완벽하지 못한 것 같다.)</strong></li>
<li>주로 lambda를 이용해서 구현.</li>
<li>함수도 데이터이기 때문에 함수가 함수를 인자로 받을 수 있는 것을 이용.</li>
</ul>
</li>
<li><p>Sync, Async</p>
<ul>
<li>빨래/설거지/청소, 100만명에게 이메일 보내기</li>
</ul>
</li>
<li><p>Relationship</p>
<ul>
<li>JS and Nodejs</li>
<li>Module and NPM</li>
<li>Structure of App.js</li>
</ul>
</li>
</ul>
<h3 id="Express-API"><a href="#Express-API" class="headerlink" title="Express API"></a>Express API</h3><ul>
<li><p>Static, Dynamic</p>
<ul>
<li>Static : html, image, … =&gt; 실시간 동기화, 편집이 쉬움 =&gt; <code>./public/htmlfile or img</code></li>
<li>Dynamic : js code in controller(call back) =&gt; 편집은 어려우나 동적으로 제어가능 =&gt; app.js</li>
</ul>
</li>
<li><p>Template Engine(Jade)</p>
<ul>
<li><code>app.set(&#39;view engine&#39;, &#39;jade&#39;)</code></li>
<li><code>app.set(&#39;views&#39;, &#39;./views&#39;)</code></li>
<li>Jade만의 형식이 따로 있음</li>
</ul>
</li>
<li><p>Query String</p>
<ul>
<li>URL을 이용한 정보의 전달</li>
<li><code>http://a.com/topic?id=1</code></li>
<li><code>http://a.com/topic/id/1</code> (semantic)</li>
</ul>
</li>
</ul>
<h2 id="Real-code"><a href="#Real-code" class="headerlink" title="Real code"></a>Real code</h2><h3 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">const</span> app = express()</div><div class="line"></div><div class="line">app.locals.pretty = <span class="literal">true</span></div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>)</div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>)</div><div class="line">app.use(express.static(<span class="string">'public'</span>)) <span class="comment">// static file service</span></div><div class="line"></div><div class="line">app.get(<span class="string">'/topic/:id'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> topics = [</div><div class="line">    <span class="string">'javascript is ...'</span>,</div><div class="line">    <span class="string">'Nodejs is ...'</span>,</div><div class="line">    <span class="string">'Express is ...'</span></div><div class="line">  ]</div><div class="line">  <span class="keyword">const</span> output = <span class="string">`</span></div><div class="line">    &lt;a href="/topic/0"&gt;javascript&lt;/a&gt;&lt;br&gt;</div><div class="line">    &lt;a href="/topic/1"&gt;nodejs&lt;/a&gt;&lt;br&gt;</div><div class="line">    &lt;a href="/topic/2"&gt;express&lt;/a&gt;&lt;br&gt;</div><div class="line">    <span class="subst">$&#123;topics[req.params.id]&#125;</span></div><div class="line">  `</div><div class="line">  res.send(output)</div><div class="line">&#125;)</div><div class="line">app.get(<span class="string">'/topic/:id/:mode'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.send(<span class="string">`<span class="subst">$&#123;req.params.id&#125;</span>,<span class="subst">$&#123;req.params.mode&#125;</span>`</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/template'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.render(<span class="string">'temp'</span>, &#123;<span class="attr">time</span>: <span class="built_in">Date</span>(), <span class="attr">_title</span>: <span class="string">'jade'</span>&#125;)</div><div class="line">&#125;)</div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.send(<span class="string">'Hello this is my main page'</span>)</div><div class="line">&#125;)</div><div class="line">app.get(<span class="string">'/dynamic'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">var</span> lis = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</div><div class="line">    lis += <span class="string">'&lt;li&gt;coding&lt;/li&gt;'</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> time = <span class="built_in">Date</span>()</div><div class="line">  res.send(</div><div class="line">    <span class="string">`</span></div><div class="line">    &lt;!DOCTYPE html&gt;</div><div class="line">    &lt;html&gt;</div><div class="line">      &lt;head&gt;</div><div class="line">        &lt;meta charset="utf-8"&gt;</div><div class="line">        &lt;title&gt;&lt;/title&gt;</div><div class="line">      &lt;/head&gt;</div><div class="line">      &lt;body&gt;</div><div class="line">        &lt;p&gt;</div><div class="line">          Hello Dynamic!!!!</div><div class="line">          &lt;ul&gt;</div><div class="line">            <span class="subst">$&#123;lis&#125;</span></div><div class="line">          &lt;/ul&gt;</div><div class="line">          <span class="subst">$&#123;time&#125;</span></div><div class="line">        &lt;/p&gt;</div><div class="line">      &lt;/body&gt;</div><div class="line">    &lt;/html&gt;</div><div class="line">    `</div><div class="line">  )</div><div class="line">&#125;)</div><div class="line">app.get(<span class="string">'/route'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.send(<span class="string">'&lt;img src="/five_minutes.png" /&gt;'</span>)</div><div class="line">&#125;)</div><div class="line">app.get(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.send(</div><div class="line">    <span class="string">`&lt;h1&gt;Practice&lt;/h1&gt;</span></div><div class="line">    &lt;p&gt;What are you doing now?&lt;/p&gt;`</div><div class="line">  )</div><div class="line">&#125;)</div><div class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Connected at 3000 port!'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Template-jade"><a href="#Template-jade" class="headerlink" title="Template.jade"></a>Template.jade</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">html</div><div class="line">  head</div><div class="line">    title= _title</div><div class="line">  body</div><div class="line">    h1 Hello world!</div><div class="line">    ul</div><div class="line">      -for(var i=0; i&lt;5; i++)</div><div class="line">        li coding</div><div class="line">    div= time</div></pre></td></tr></table></figure>
<h2 id="궁금한-것들"><a href="#궁금한-것들" class="headerlink" title="궁금한 것들"></a>궁금한 것들</h2><ul>
<li>한 컴퓨터에 여러 서버가 존재할 경우, 만일 서버의 포트가 겹치면 어떻게 되는가?</li>
<li>왜 콜백이 존재해야 하는가? (애초에 콜백이란 무엇인가?) maybe 중복의 제거?(기능적 중복)</li>
<li>Ruby는 멀티스레드를 지원하는가?</li>
<li>Nodejs는 싱글스레드인데 어떻게 비동기가 가능한 것인가?(비동기의 원리)</li>
<li><code>const http = require(&#39;http&#39;)</code> 의 정확한 의미? (http모듈 객체를 http라는 상수에 넣는다? 그럼 모듈 객체는 뭐지? 인스턴스인가?)</li>
<li>Nodejs의 기능을 구현하기 위한 ‘그릇’ 혹은 ‘배경’ = JavaScript 라고 이해해도 되는가?</li>
<li>RESTful?</li>
<li>Semantic URL?</li>
<li>Node의 View는 어떻게 꾸며주는가? Angular? Jade?</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;선생님&quot;&gt;&lt;a href=&quot;#선생님&quot; class=&quot;headerlink&quot; title=&quot;선생님&quot;&gt;&lt;/a&gt;선생님&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://opentutorials.org/course/2136/&quot; target=&quot;_blank&quot; r
    
    </summary>
    
      <category term="JavaScript" scheme="https://voidsatisfaction.github.io/categories/JavaScript/"/>
    
      <category term="Nodejs" scheme="https://voidsatisfaction.github.io/categories/JavaScript/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://voidsatisfaction.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>세상은 넓고 대단한 사람은 많다.</title>
    <link href="https://voidsatisfaction.github.io/2016/08/21/2016-8-21-b-justbecause/"/>
    <id>https://voidsatisfaction.github.io/2016/08/21/2016-8-21-b-justbecause/</id>
    <published>2016-08-21T12:52:00.000Z</published>
    <updated>2016-09-26T15:31:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>모덴 웹을 위한 Node.js프로그래밍 이라는 책을 사두기만 하고 처음 펴 봤는데 작가님의 blog가 있길래 한 번 들어가 봤다.</p>
<p>그랬더니 웬걸 정말 대단하신 분이다. 하하. (왜 대단하신 분인지는 <a href="http://rintiantta.blog.me/" target="_blank" rel="external">블로그</a>에 들어가 보시면 압니다.)</p>
<p>대놓고 얘기하자면 <strong>나도 작가님 이상이 되고싶다!</strong></p>
<p>프로그래밍을 시작한지 이제 1년인데 욕심이 너무 많은거 아니냐고 생각할 수도 있지만</p>
<p>뭐, 이게 내가 열심히 하는 원동력이 된다고 생각한다.</p>
<p>그리고 수준이 너무 많이 차이난다고 생각하여 자괴감을 느낄 필요도 없다.</p>
<p>나는 그냥 천천히 내 생각대로 내가 하고싶은대로 하나하나 해나가야지.</p>
<p><strong>힘내자! 아자아자! ^ ^</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;모덴 웹을 위한 Node.js프로그래밍 이라는 책을 사두기만 하고 처음 펴 봤는데 작가님의 blog가 있길래 한 번 들어가 봤다.&lt;/p&gt;
&lt;p&gt;그랬더니 웬걸 정말 대단하신 분이다. 하하. (왜 대단하신 분인지는 &lt;a href=&quot;http://rin
    
    </summary>
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/categories/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/tags/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>후배의 좋은 가르침</title>
    <link href="https://voidsatisfaction.github.io/2016/08/21/2016-8-21-a-learning/"/>
    <id>https://voidsatisfaction.github.io/2016/08/21/2016-8-21-a-learning/</id>
    <published>2016-08-21T02:52:00.000Z</published>
    <updated>2016-09-26T15:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="포인트"><a href="#포인트" class="headerlink" title="포인트"></a>포인트</h2><ul>
<li><p>백엔드의 본질은 서버를 구성하는 틀을 이해하는 것이다(ex 로그인)</p>
</li>
<li><p>Connecting the dots</p>
</li>
<li><p>자신이 무엇을 좋아하는지, 하고 싶은지, 잘 할 수 있는지에 대한 자기분석이 중요하고, 그것을 잘 살려 나갈 수 있어야 한다</p>
</li>
<li><p>진정한 도전정신</p>
</li>
</ul>
<hr>
<p>오늘은 후배를 만났다.</p>
<p>사실 그는 대학에 늦게 들어온 것 뿐이지, 컴퓨터 공학과 웹 공부에 대해서는 나에게 아주 좋은 선배다.</p>
<p>그 후배를 만나면 언제나 큰 자극을 받을 뿐더러 많은 것을 깨닫게 해준다.</p>
<p>오늘은 그 후배와의 만남에서 느낀 몇가지에 대해서 간단히 써 보려고 한다.</p>
<hr>
<h2 id="백엔드의-본질은-서버를-구성하는-틀을-이해하는-것이다"><a href="#백엔드의-본질은-서버를-구성하는-틀을-이해하는-것이다" class="headerlink" title="백엔드의 본질은 서버를 구성하는 틀을 이해하는 것이다"></a>백엔드의 본질은 서버를 구성하는 틀을 이해하는 것이다</h2><p>말 그대로 후배는 웹 개발에 있어서 백엔드의 본질은 서버를 구성하는 틀을 이해하는 것이라고 했다. 서버의 구조란 Ruby On Rails를 예로 들어보면 다음과 같다.</p>
<p><img src="/images/20160821_rails_architecture.png" alt="ROR Architecture"></p>
<p>위와 같이 Rails가 어떤 식으로 돌아가는지 Data Flow를 이해하는 것 또한 서버를 구성하는 틀을 이해하는 방식의 하나이다.</p>
<p>여기서 한가지 포인트는 반드시 서버 내부의 Data Flow를 이해하는 것만이 서버를 구성하는 틀을 이해하는 것이 아니라는 것이다.</p>
<p><strong>서버를 다양한 각도에서 볼 수 있어야 한다.</strong></p>
<p>서버를 ‘기능’의 관점에서 이해할 수도 있어야 한다. 예를들면, 서버에는 로그인, DB와의 연동 등등.. 다양한 기능이 탑재되어 있다. 이러한 ‘기능’의 시선에서 서버를 볼 줄도 알아야한다.</p>
<p>그리고 서버에 대한 이해가 깊어진 이후에는 각각의 상황에서 구글 선생님의 도움을 청하면 된다.</p>
<h2 id="Connecting-the-dots"><a href="#Connecting-the-dots" class="headerlink" title="Connecting the dots"></a>Connecting the dots</h2><p>‘Connecting the dots’라는 말은 ‘Give it five minutes’와 더불어 내 삶의 신조와 같다. 이 말은 스티브 잡스가 스탠포드 연설에서 한 말인데, 그 뜻은 <strong>‘지금 하는 것이 별로 도움이 되지 않는 것 처럼 보이더라도 그것이 점과 점을 연결하듯이 언젠가 무엇인가에 연결되어 도움이 될 수도 있다’</strong> 라는 것이다.(여담이지만 스티브 잡스의 스탠포드 연설은 정말 볼 만한 가치가 있다.)</p>
<p>오늘 마침 후배가 자신이 참 좋아하는 말이라며 Connecting the dots에 대해서 언급했는데, 오랜만에 만난 친구를 보는 것과 같은 반가움을 느꼈다.</p>
<h2 id="자신이-무엇을-좋아하는지-하고-싶은지-잘-할-수-있는지에-대한-자기분석이-중요하고-그것을-잘-살려-나갈-수-있어야-한다"><a href="#자신이-무엇을-좋아하는지-하고-싶은지-잘-할-수-있는지에-대한-자기분석이-중요하고-그것을-잘-살려-나갈-수-있어야-한다" class="headerlink" title="자신이 무엇을 좋아하는지, 하고 싶은지, 잘 할 수 있는지에 대한 자기분석이 중요하고, 그것을 잘 살려 나갈 수 있어야 한다"></a>자신이 무엇을 좋아하는지, 하고 싶은지, 잘 할 수 있는지에 대한 자기분석이 중요하고, 그것을 잘 살려 나갈 수 있어야 한다</h2><p>사실 나는 이 부분이 조금 약하다고 생각한다. 물론 성격차이 일 수 있겠지만, 나는 이성적으로 냉철하게 나를 분석하고 계획을 세워서 생활하기보다는 물에 내 몸을 맡기듯이 내가 직관적으로 좋아하는 무엇인가를 자연스럽게 계속해서 추구해나가는 타입이다.</p>
<p>하지만 세상일들이 무릇 그렇듯 <strong>균형이 참 중요한 것 같다.</strong></p>
<p>항상 직관적으로만 살아가면 냉철함을 잊기 쉽고 항상 이성적으로만 살아가면 뜨거운 열정을 잊기 쉽다. 직관과 이성의 조화가 중요하다고 생각한다. 이는 인간이나 기계나 매한가지인 듯 싶다.</p>
<p>직관을 배우려는 기계를 보면서 말이다.</p>
<h2 id="진정한-도전정신"><a href="#진정한-도전정신" class="headerlink" title="진정한 도전정신"></a>진정한 도전정신</h2><p>단도직입적으로 나는 혼자서 무엇인가를 하는 것을 좋아한다. 이는, 내가 프로그래밍을 좋아하는 이유 중 하나이기도 하다.</p>
<p>하지만 후배는 정말 적극적으로 도전해나가는 모습이 참 멋있었다. 섬에 가서 인턴생들과 함께 기계팔을 만들어서 프로그래밍을 하거나, 스타트업에 참여해 CTO로서 적극적으로 도전해나가는 모습. 또, 그것에 그치지 않고 해커톤까지 열심히 참여하는 모습은 정말 대단하다고 느껴진다.</p>
<p>그래도 역시 나는 ‘나 다움’이 있다고 생각한다.</p>
<p>내가 혼자서 무엇인가를 하는 것을 좋아하는데 억지로 나가서 도전할 필요는 없다고 생각한다. <strong>대신에 나 자신이 진정 도전하고 싶다는 생각이 들 때 두려움 없이 뛰쳐나갈 수 있는 마음가짐을 갖고 있는 것은 중요하다고 생각한다.</strong></p>
<p>두려움과 그것을 극복할 의지.</p>
<blockquote>
<p>The only thing we have to fear is fear itself.</p>
</blockquote>
<p>오늘 짧다면 짧고 길다면 긴 시간동안 이렇게 중요한 교훈을 느끼게 해주고 나를 한 발자국 더 나아게가 자극시켜준 후배에게 정말 감사하다는 말을 전해주고 싶다.</p>
<p>오늘은 기분이 참 좋은 날이다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;포인트&quot;&gt;&lt;a href=&quot;#포인트&quot; class=&quot;headerlink&quot; title=&quot;포인트&quot;&gt;&lt;/a&gt;포인트&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;백엔드의 본질은 서버를 구성하는 틀을 이해하는 것이다(ex 로그인)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Co
    
    </summary>
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/categories/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/tags/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>Local Git에서 Git Hub로 push할 경우 permission deny문제</title>
    <link href="https://voidsatisfaction.github.io/2016/08/19/2016-8-19-a-found/"/>
    <id>https://voidsatisfaction.github.io/2016/08/19/2016-8-19-a-found/</id>
    <published>2016-08-19T12:52:00.000Z</published>
    <updated>2016-09-26T15:27:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="배경"><a href="#배경" class="headerlink" title="배경"></a>배경</h2><p>Jekyll을 로컬에서 수정하고 싶어서 Github의 repository와의 연동을 시도했으나, 다음과 같은 에러 메세지가 떴다.</p>
<p><img src="/images/20160819_giterror.png" alt="Error message"></p>
<h2 id="포인트"><a href="#포인트" class="headerlink" title="포인트"></a>포인트</h2><p><strong>Local에 저장되어있는 Keychain에서, Github.com의 account와 password를 현재 사용하는 깃허브의 계정으로 변환</strong></p>
<h2 id="과정"><a href="#과정" class="headerlink" title="과정"></a>과정</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1) Mac에서 Keychain이라는 어플리케이션을 연다.</div><div class="line">2) github.com을 검색한다.</div><div class="line">3) 속성에서 account와 password를 현 github계정으로 바꿔준다.</div><div class="line">4) 원격 저장소의 git내용에 현 저장소에는 없는 내용이 있다면 git pull origin master 로 동기화 시켜준다.</div><div class="line">5) git push origin master</div></pre></td></tr></table></figure>
<h2 id="깨달은-것"><a href="#깨달은-것" class="headerlink" title="깨달은 것"></a>깨달은 것</h2><p>사실 생각해보면, git과 github를 연동하기 위해서는 github의 계정정보가 로컬에 반드시 있어야 한다. 그래야만 인증이 가능하기 때문이다.<br>그렇기 때문에, permission denied 에러가 생겼다는 것은 그 계정과 연관이 깊을 가능성이 크고, 그것을 바꿀 생각을 해야하는데 단순히 git.username git.email 만 변경한다고 해서 인증 에러를 해결할 수는 없는 것이다.</p>
<p><strong>역시 본질에 입각해서 생각하면 문제의 본질을 이해할 수 있다.</strong></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ol>
<li><a href="https://blogs.msdn.microsoft.com/thebeebs/2014/08/21/github-permission-to-repository-denied-to-username/" target="_blank" rel="external">Permission denied error and Keychain Access</a></li>
<li><a href="https://help.github.com/articles/updating-credentials-from-the-osx-keychain/" target="_blank" rel="external">GitHub::Updating credentials from the OSX Keychain</a></li>
<li><a href="https://help.github.com/articles/dealing-with-non-fast-forward-errors/" target="_blank" rel="external">GItHub::Dealing with non-fast-forward errors</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;배경&quot;&gt;&lt;a href=&quot;#배경&quot; class=&quot;headerlink&quot; title=&quot;배경&quot;&gt;&lt;/a&gt;배경&lt;/h2&gt;&lt;p&gt;Jekyll을 로컬에서 수정하고 싶어서 Github의 repository와의 연동을 시도했으나, 다음과 같은 에러 메세지가 떴
    
    </summary>
    
      <category term="Utils" scheme="https://voidsatisfaction.github.io/categories/Utils/"/>
    
      <category term="Git/GitHub" scheme="https://voidsatisfaction.github.io/categories/Utils/Git-GitHub/"/>
    
    
      <category term="GitHub" scheme="https://voidsatisfaction.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>교토대 정보학과를 붙고 나서...</title>
    <link href="https://voidsatisfaction.github.io/2016/08/19/2016-8-19-b-graduate/"/>
    <id>https://voidsatisfaction.github.io/2016/08/19/2016-8-19-b-graduate/</id>
    <published>2016-08-19T02:52:00.000Z</published>
    <updated>2016-09-26T15:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><ol>
<li><a href="#자기소개">자기소개</a></li>
<li>프로그래밍의 우주에 오신 것을 환영합니다!</li>
<li>왜 프로그래밍을 공부하게 되었는가?</li>
<li>어떻게 대학원을 준비했는가?</li>
</ol>
<h1 id="자기소개"><a href="#자기소개" class="headerlink" title="자기소개"></a>자기소개</h1><p>나는 2016년 8월 현재 교토대학교 경제학부 4학년에 재학중인 학생이다.</p>
<p>프로그래밍을 시작한 건, 대학교 3학년 여름방학이 시작될 무렵이었다.</p>
<h1 id="왜-프로그래밍을-공부하게-되었는가"><a href="#왜-프로그래밍을-공부하게-되었는가" class="headerlink" title="왜 프로그래밍을 공부하게 되었는가?"></a>왜 프로그래밍을 공부하게 되었는가?</h1><p>내가 처음 프로그래밍을 시작하게 된 계기는 막연한 호기심과 멋 때문이었다.<br>일본 대학의 문과계열 학생은 세미나(연구실과 비슷한 느낌입니다.)에 참가하여 지도교수님 밑에서 지도교수님의 전문분야를 학습하는데, 나와 같은 경우는 “교토식 경영”으로 한국에서도 유명하신 스에마츠 치히로 교수님 밑에서 수학하게 되었다.</p>
<p>내가 속한 세미나는 Logical Thinking에 대한 연구를 하며, 단순히 전문지식을 배우는 것에서 끝나지 않고, 학생들끼리 그룹 토론을 하는 경우도 많았고, 다양한 배경의 학생들의 의견을 들으며 자극도 많이 받을 수 있는 환경에 있었다.</p>
<p>나는 그 세미나에서 처음으로 프로그래밍을 전문적으로 하는 사람을 접하게 되었다. 웨이트 트레이닝을 매우매우 좋아하는 선배였는데(나도 그 선배와 같이 웨이트에 참여하곤 했다.), 프로그래밍을 정말로 좋아하고 프로그래밍을 즐기는 것에대한 자부심이 있는 선배였다.</p>
<p>그 선배는 우리는 하지 못하는 무엇인가를 항상 “창조” 했다. 예를들어, “빵집의 매상을 올리는 방법을 생각하라”라는 문제를 해결하려고 할때, 나를 비롯한 다른 학생들이 “~~한 식으로 마케팅을 하거나, 비용을 절감하면 될 것같습니다.” 라고 할 때, 그 선배는,” ~~한 시스템을 직접 만들면 어때?” 와 같은 웹 지식을 배경으로 한 보다 구체적인 방안을 제시했고, 단순히 제시만 한 것이 아니라 실현까지 하므로써 매우 설득력이 높았다.</p>
<p>그때부터 그 선배의 프로그래밍이라는 능력이 참 멋있어보이고 “저 선배처럼 나도 저 선배처럼 한 번 프로그래밍을 공부해봐야겠다.”라는 생각을 하게되었고, 그것이 나의 프로그래밍에 관한 모든 것의 시작이었다.</p>
<h1 id="프로그래밍의-우주에-오신-것을-환영합니다"><a href="#프로그래밍의-우주에-오신-것을-환영합니다" class="headerlink" title="프로그래밍의 우주에 오신 것을 환영합니다!"></a>프로그래밍의 우주에 오신 것을 환영합니다!</h1><p>그렇게 나는 프로그래밍의 우주를 탐험하기 시작했다. 가장 처음에, 일단 어디서 프로그래밍을 공부해야하지 몰라서, 네이버에 “프로그래밍 무료 강의” 라고 검색하여 운이 좋게도 egoing님이 운영하고 계신 <a href="https://opentutorials.org/course/1" target="_blank" rel="external">생활코딩</a> 이라는 사이트를 알게 되었다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#자기소개&quot;&gt;자기소개&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;프로그래밍의 우주에 오신 것을 환영합니다!&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/categories/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="세상 사는 이야기" scheme="https://voidsatisfaction.github.io/tags/%EC%84%B8%EC%83%81-%EC%82%AC%EB%8A%94-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>지킬에 관하여 알아낸 사실들</title>
    <link href="https://voidsatisfaction.github.io/2016/08/18/2016-8-18-a-jekyllfound/"/>
    <id>https://voidsatisfaction.github.io/2016/08/18/2016-8-18-a-jekyllfound/</id>
    <published>2016-08-18T11:52:00.000Z</published>
    <updated>2016-09-26T15:53:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>오늘 지킬에 대해서 알아낸 사실은 다음과 같다.</p>
<ol>
<li>Syntax highlight기능을 쓰기 위해서는 <figure class="highlight plain"><figcaption><span>써야한다.</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">2. ``` 앞뒤에 반드시 한 줄씩 띄워주어야 한다. 그렇지 않으면 잘못 인식된다.</div><div class="line">2. 내용 작성의 첫 줄은 부제목이다. 따라서 일정 길이 이상이 되면 자동으로 문법이 풀린다.</div><div class="line">3. github푸시 후 실제의 블로그에 적용되기 까지는 어느정도 시간이 필요하다</div><div class="line"></div><div class="line"></div><div class="line">### Syntax highlight기능 ###</div><div class="line"></div><div class="line">지킬에서는 하이라이트 기능으로서, Ruby의 Rough를 사용하는데, 그 사용법은</div><div class="line">\```\[언어명\]</div><div class="line"></div><div class="line">\</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;오늘 지킬에 대해서 알아낸 사실은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Syntax highlight기능을 쓰기 위해서는 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;써야한다.&lt;/span&gt;&lt;/figca
    
    </summary>
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://voidsatisfaction.github.io/tags/Ruby/"/>
    
  </entry>
  
</feed>
